
401_Uart_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004610  08004610  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000008c  080046a4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080046a4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8f9  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002083  00000000  00000000  0002e9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00030a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000316b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ffe  00000000  00000000  00032260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eddc  00000000  00000000  0004825e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7ae  00000000  00000000  0005703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e37e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a8  00000000  00000000  000e3838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800456c 	.word	0x0800456c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800456c 	.word	0x0800456c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_Init+0x40>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_Init+0x40>)
 80005aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x40>)
 80005b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f94f 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f003 f834 	bl	8003634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023c00 	.word	0x40023c00

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f967 	bl	80008ca <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f92f 	bl	8000876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	200000a8 	.word	0x200000a8

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200000a8 	.word	0x200000a8

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff ffee 	bl	8000660 <HAL_GetTick>
 8000684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000690:	d005      	beq.n	800069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_Delay+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069e:	bf00      	nop
 80006a0:	f7ff ffde 	bl	8000660 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f7      	bhi.n	80006a0 <HAL_Delay+0x28>
  {
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <__NVIC_EnableIRQ+0x38>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff8e 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff29 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff3e 	bl	8000708 <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff8e 	bl	80007b4 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5d 	bl	8000760 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff31 	bl	8000724 <__NVIC_EnableIRQ>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffa2 	bl	800081c <SysTick_Config>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff feb6 	bl	8000660 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d008      	beq.n	8000914 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e052      	b.n	80009ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f022 0216 	bic.w	r2, r2, #22
 8000922:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000932:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	2b00      	cmp	r3, #0
 800093a:	d103      	bne.n	8000944 <HAL_DMA_Abort+0x62>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000940:	2b00      	cmp	r3, #0
 8000942:	d007      	beq.n	8000954 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f022 0208 	bic.w	r2, r2, #8
 8000952:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0201 	bic.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000964:	e013      	b.n	800098e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000966:	f7ff fe7b 	bl	8000660 <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	2b05      	cmp	r3, #5
 8000972:	d90c      	bls.n	800098e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2220      	movs	r2, #32
 8000978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2203      	movs	r2, #3
 800097e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e015      	b.n	80009ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1e4      	bne.n	8000966 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a0:	223f      	movs	r2, #63	; 0x3f
 80009a2:	409a      	lsls	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d004      	beq.n	80009e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e00c      	b.n	80009fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2205      	movs	r2, #5
 80009e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0201 	bic.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e159      	b.n	8000cd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a24:	2201      	movs	r2, #1
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f040 8148 	bne.w	8000cd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d005      	beq.n	8000a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d130      	bne.n	8000abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	2203      	movs	r2, #3
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a90:	2201      	movs	r2, #1
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	f003 0201 	and.w	r2, r3, #1
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d017      	beq.n	8000af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d123      	bne.n	8000b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	08da      	lsrs	r2, r3, #3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	691a      	ldr	r2, [r3, #16]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	08da      	lsrs	r2, r3, #3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3208      	adds	r2, #8
 8000b46:	69b9      	ldr	r1, [r7, #24]
 8000b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 0203 	and.w	r2, r3, #3
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 80a2 	beq.w	8000cd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b57      	ldr	r3, [pc, #348]	; (8000cf0 <HAL_GPIO_Init+0x2e8>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a56      	ldr	r2, [pc, #344]	; (8000cf0 <HAL_GPIO_Init+0x2e8>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <HAL_GPIO_Init+0x2e8>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000baa:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <HAL_GPIO_Init+0x2ec>)
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a49      	ldr	r2, [pc, #292]	; (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d019      	beq.n	8000c0a <HAL_GPIO_Init+0x202>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a48      	ldr	r2, [pc, #288]	; (8000cfc <HAL_GPIO_Init+0x2f4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0x1fe>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a47      	ldr	r2, [pc, #284]	; (8000d00 <HAL_GPIO_Init+0x2f8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d00d      	beq.n	8000c02 <HAL_GPIO_Init+0x1fa>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a46      	ldr	r2, [pc, #280]	; (8000d04 <HAL_GPIO_Init+0x2fc>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x1f6>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a45      	ldr	r2, [pc, #276]	; (8000d08 <HAL_GPIO_Init+0x300>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_GPIO_Init+0x1f2>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	e008      	b.n	8000c0c <HAL_GPIO_Init+0x204>
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x204>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e004      	b.n	8000c0c <HAL_GPIO_Init+0x204>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_Init+0x204>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_Init+0x204>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4093      	lsls	r3, r2
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c1c:	4935      	ldr	r1, [pc, #212]	; (8000cf4 <HAL_GPIO_Init+0x2ec>)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c78:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	f67f aea2 	bls.w	8000a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40013c00 	.word	0x40013c00

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e267      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d075      	beq.n	8000e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d2e:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 030c 	and.w	r3, r3, #12
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d00c      	beq.n	8000d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d3a:	4b85      	ldr	r3, [pc, #532]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d112      	bne.n	8000d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d46:	4b82      	ldr	r3, [pc, #520]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d52:	d10b      	bne.n	8000d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	4b7e      	ldr	r3, [pc, #504]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d05b      	beq.n	8000e18 <HAL_RCC_OscConfig+0x108>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d157      	bne.n	8000e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e242      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d106      	bne.n	8000d84 <HAL_RCC_OscConfig+0x74>
 8000d76:	4b76      	ldr	r3, [pc, #472]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a75      	ldr	r2, [pc, #468]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e01d      	b.n	8000dc0 <HAL_RCC_OscConfig+0xb0>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0x98>
 8000d8e:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a6f      	ldr	r2, [pc, #444]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a6c      	ldr	r2, [pc, #432]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e00b      	b.n	8000dc0 <HAL_RCC_OscConfig+0xb0>
 8000da8:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a68      	ldr	r2, [pc, #416]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a65      	ldr	r2, [pc, #404]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc4a 	bl	8000660 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fc46 	bl	8000660 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e207      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
 8000dee:	e014      	b.n	8000e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc36 	bl	8000660 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fc32 	bl	8000660 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e1f3      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0xe8>
 8000e16:	e000      	b.n	8000e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d063      	beq.n	8000eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e26:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e32:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d11c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d116      	bne.n	8000e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x152>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d001      	beq.n	8000e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e1c7      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e62:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4937      	ldr	r1, [pc, #220]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	e03a      	b.n	8000eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d020      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_RCC_OscConfig+0x244>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e86:	f7ff fbeb 	bl	8000660 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fbe7 	bl	8000660 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e1a8      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4925      	ldr	r1, [pc, #148]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	600b      	str	r3, [r1, #0]
 8000ec0:	e015      	b.n	8000eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <HAL_RCC_OscConfig+0x244>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbca 	bl	8000660 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fbc6 	bl	8000660 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e187      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d036      	beq.n	8000f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d016      	beq.n	8000f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_RCC_OscConfig+0x248>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f08:	f7ff fbaa 	bl	8000660 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fba6 	bl	8000660 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e167      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_RCC_OscConfig+0x240>)
 8000f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x200>
 8000f2e:	e01b      	b.n	8000f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_RCC_OscConfig+0x248>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb93 	bl	8000660 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	e00e      	b.n	8000f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fb8f 	bl	8000660 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d907      	bls.n	8000f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e150      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
 8000f50:	40023800 	.word	0x40023800
 8000f54:	42470000 	.word	0x42470000
 8000f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5c:	4b88      	ldr	r3, [pc, #544]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1ea      	bne.n	8000f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 8097 	beq.w	80010a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b7d      	ldr	r3, [pc, #500]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a7c      	ldr	r2, [pc, #496]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b7a      	ldr	r3, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b77      	ldr	r3, [pc, #476]	; (8001184 <HAL_RCC_OscConfig+0x474>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	4b74      	ldr	r3, [pc, #464]	; (8001184 <HAL_RCC_OscConfig+0x474>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a73      	ldr	r2, [pc, #460]	; (8001184 <HAL_RCC_OscConfig+0x474>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fb4f 	bl	8000660 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fb4b 	bl	8000660 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e10c      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <HAL_RCC_OscConfig+0x474>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x2ea>
 8000fec:	4b64      	ldr	r3, [pc, #400]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff0:	4a63      	ldr	r2, [pc, #396]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff8:	e01c      	b.n	8001034 <HAL_RCC_OscConfig+0x324>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x30c>
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001006:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6713      	str	r3, [r2, #112]	; 0x70
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001012:	4a5b      	ldr	r2, [pc, #364]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6713      	str	r3, [r2, #112]	; 0x70
 800101a:	e00b      	b.n	8001034 <HAL_RCC_OscConfig+0x324>
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800101e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001020:	4a57      	ldr	r2, [pc, #348]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	6713      	str	r3, [r2, #112]	; 0x70
 8001028:	4b55      	ldr	r3, [pc, #340]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800102a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102c:	4a54      	ldr	r2, [pc, #336]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800102e:	f023 0304 	bic.w	r3, r3, #4
 8001032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d015      	beq.n	8001068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff fb10 	bl	8000660 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001042:	e00a      	b.n	800105a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001044:	f7ff fb0c 	bl	8000660 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001052:	4293      	cmp	r3, r2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e0cb      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800105c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0ee      	beq.n	8001044 <HAL_RCC_OscConfig+0x334>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001068:	f7ff fafa 	bl	8000660 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106e:	e00a      	b.n	8001086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	f7ff faf6 	bl	8000660 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	; 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e0b5      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1ee      	bne.n	8001070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d105      	bne.n	80010a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a38      	ldr	r2, [pc, #224]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800109e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80a1 	beq.w	80011f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d05c      	beq.n	8001174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d141      	bne.n	8001146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_RCC_OscConfig+0x478>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff faca 	bl	8000660 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff fac6 	bl	8000660 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e087      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69da      	ldr	r2, [r3, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	019b      	lsls	r3, r3, #6
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	085b      	lsrs	r3, r3, #1
 8001106:	3b01      	subs	r3, #1
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	061b      	lsls	r3, r3, #24
 8001112:	491b      	ldr	r1, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_RCC_OscConfig+0x478>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fa9f 	bl	8000660 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fa9b 	bl	8000660 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e05c      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x416>
 8001144:	e054      	b.n	80011f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_RCC_OscConfig+0x478>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fa88 	bl	8000660 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001154:	f7ff fa84 	bl	8000660 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e045      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_RCC_OscConfig+0x470>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x444>
 8001172:	e03d      	b.n	80011f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d107      	bne.n	800118c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e038      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000
 8001188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_RCC_OscConfig+0x4ec>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d028      	beq.n	80011ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d121      	bne.n	80011ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d11a      	bne.n	80011ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011bc:	4013      	ands	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d111      	bne.n	80011ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	3b01      	subs	r3, #1
 80011d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011d8:	429a      	cmp	r2, r3
 80011da:	d107      	bne.n	80011ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0cc      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d90c      	bls.n	800123c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0b8      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a58      	ldr	r2, [pc, #352]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800125e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001278:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	494d      	ldr	r1, [pc, #308]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d044      	beq.n	8001320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d107      	bne.n	80012ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e07f      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d003      	beq.n	80012be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e06f      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e067      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f023 0203 	bic.w	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4934      	ldr	r1, [pc, #208]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f0:	f7ff f9b6 	bl	8000660 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	e00a      	b.n	800130e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	f7ff f9b2 	bl	8000660 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e04f      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 020c 	and.w	r2, r3, #12
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	429a      	cmp	r2, r3
 800131e:	d1eb      	bne.n	80012f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d20c      	bcs.n	8001348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e032      	b.n	80013ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4916      	ldr	r1, [pc, #88]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	4313      	orrs	r3, r2
 8001364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	490e      	ldr	r1, [pc, #56]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001386:	f000 f821 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 800138a:	4602      	mov	r2, r0
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	490a      	ldr	r1, [pc, #40]	; (80013c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	5ccb      	ldrb	r3, [r1, r3]
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f916 	bl	80005d8 <HAL_InitTick>

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00
 80013bc:	40023800 	.word	0x40023800
 80013c0:	080045bc 	.word	0x080045bc
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	20000000 	.word	0x20000000

080013cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d0:	b090      	sub	sp, #64	; 0x40
 80013d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_GetSysClockFreq+0x180>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d00d      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x40>
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	f200 80a1 	bhi.w	8001538 <HAL_RCC_GetSysClockFreq+0x16c>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x34>
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d003      	beq.n	8001406 <HAL_RCC_GetSysClockFreq+0x3a>
 80013fe:	e09b      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_GetSysClockFreq+0x184>)
 8001402:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001404:	e09b      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001406:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_GetSysClockFreq+0x188>)
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800140a:	e098      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800140c:	4b4f      	ldr	r3, [pc, #316]	; (800154c <HAL_RCC_GetSysClockFreq+0x180>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001416:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_GetSysClockFreq+0x180>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d028      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_RCC_GetSysClockFreq+0x180>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	099b      	lsrs	r3, r3, #6
 8001428:	2200      	movs	r2, #0
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	627a      	str	r2, [r7, #36]	; 0x24
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001434:	2100      	movs	r1, #0
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_GetSysClockFreq+0x188>)
 8001438:	fb03 f201 	mul.w	r2, r3, r1
 800143c:	2300      	movs	r3, #0
 800143e:	fb00 f303 	mul.w	r3, r0, r3
 8001442:	4413      	add	r3, r2
 8001444:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_RCC_GetSysClockFreq+0x188>)
 8001446:	fba0 1202 	umull	r1, r2, r0, r2
 800144a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800144c:	460a      	mov	r2, r1
 800144e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001452:	4413      	add	r3, r2
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001458:	2200      	movs	r2, #0
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	61fa      	str	r2, [r7, #28]
 800145e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001462:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001466:	f7fe ff13 	bl	8000290 <__aeabi_uldivmod>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4613      	mov	r3, r2
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001472:	e053      	b.n	800151c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_RCC_GetSysClockFreq+0x180>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	2200      	movs	r2, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	617a      	str	r2, [r7, #20]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001486:	f04f 0b00 	mov.w	fp, #0
 800148a:	4652      	mov	r2, sl
 800148c:	465b      	mov	r3, fp
 800148e:	f04f 0000 	mov.w	r0, #0
 8001492:	f04f 0100 	mov.w	r1, #0
 8001496:	0159      	lsls	r1, r3, #5
 8001498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149c:	0150      	lsls	r0, r2, #5
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	ebb2 080a 	subs.w	r8, r2, sl
 80014a6:	eb63 090b 	sbc.w	r9, r3, fp
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80014b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80014ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80014be:	ebb2 0408 	subs.w	r4, r2, r8
 80014c2:	eb63 0509 	sbc.w	r5, r3, r9
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	00eb      	lsls	r3, r5, #3
 80014d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014d4:	00e2      	lsls	r2, r4, #3
 80014d6:	4614      	mov	r4, r2
 80014d8:	461d      	mov	r5, r3
 80014da:	eb14 030a 	adds.w	r3, r4, sl
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	eb45 030b 	adc.w	r3, r5, fp
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014f2:	4629      	mov	r1, r5
 80014f4:	028b      	lsls	r3, r1, #10
 80014f6:	4621      	mov	r1, r4
 80014f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014fc:	4621      	mov	r1, r4
 80014fe:	028a      	lsls	r2, r1, #10
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001506:	2200      	movs	r2, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001510:	f7fe febe 	bl	8000290 <__aeabi_uldivmod>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4613      	mov	r3, r2
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_GetSysClockFreq+0x180>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	3301      	adds	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800152c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001536:	e002      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_RCC_GetSysClockFreq+0x184>)
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800153c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001540:	4618      	mov	r0, r3
 8001542:	3740      	adds	r7, #64	; 0x40
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	00f42400 	.word	0x00f42400
 8001554:	017d7840 	.word	0x017d7840

08001558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_RCC_GetHCLKFreq+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000000c 	.word	0x2000000c

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001574:	f7ff fff0 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	0a9b      	lsrs	r3, r3, #10
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	080045cc 	.word	0x080045cc

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff ffdc 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	0b5b      	lsrs	r3, r3, #13
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	080045cc 	.word	0x080045cc

080015c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e041      	b.n	8001656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f002 f922 	bl	8003830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3304      	adds	r3, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f000 fbe4 	bl	8001dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d001      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e044      	b.n	8001702 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_TIM_Base_Start_IT+0xb0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d018      	beq.n	80016cc <HAL_TIM_Base_Start_IT+0x6c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a2:	d013      	beq.n	80016cc <HAL_TIM_Base_Start_IT+0x6c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_TIM_Base_Start_IT+0xb4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00e      	beq.n	80016cc <HAL_TIM_Base_Start_IT+0x6c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_TIM_Base_Start_IT+0xb8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d009      	beq.n	80016cc <HAL_TIM_Base_Start_IT+0x6c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_TIM_Base_Start_IT+0xbc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d004      	beq.n	80016cc <HAL_TIM_Base_Start_IT+0x6c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_TIM_Base_Start_IT+0xc0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d111      	bne.n	80016f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d010      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ee:	e007      	b.n	8001700 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40010000 	.word	0x40010000
 8001714:	40000400 	.word	0x40000400
 8001718:	40000800 	.word	0x40000800
 800171c:	40000c00 	.word	0x40000c00
 8001720:	40014000 	.word	0x40014000

08001724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e041      	b.n	80017ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f839 	bl	80017c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 fb32 	bl	8001dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <HAL_TIM_PWM_Start_IT+0x28>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e022      	b.n	8001846 <HAL_TIM_PWM_Start_IT+0x6e>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b04      	cmp	r3, #4
 8001804:	d109      	bne.n	800181a <HAL_TIM_PWM_Start_IT+0x42>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	e015      	b.n	8001846 <HAL_TIM_PWM_Start_IT+0x6e>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d109      	bne.n	8001834 <HAL_TIM_PWM_Start_IT+0x5c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e008      	b.n	8001846 <HAL_TIM_PWM_Start_IT+0x6e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0b3      	b.n	80019b6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <HAL_TIM_PWM_Start_IT+0x86>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800185c:	e013      	b.n	8001886 <HAL_TIM_PWM_Start_IT+0xae>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d104      	bne.n	800186e <HAL_TIM_PWM_Start_IT+0x96>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800186c:	e00b      	b.n	8001886 <HAL_TIM_PWM_Start_IT+0xae>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d104      	bne.n	800187e <HAL_TIM_PWM_Start_IT+0xa6>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800187c:	e003      	b.n	8001886 <HAL_TIM_PWM_Start_IT+0xae>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b0c      	cmp	r3, #12
 800188a:	d841      	bhi.n	8001910 <HAL_TIM_PWM_Start_IT+0x138>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_TIM_PWM_Start_IT+0xbc>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018c9 	.word	0x080018c9
 8001898:	08001911 	.word	0x08001911
 800189c:	08001911 	.word	0x08001911
 80018a0:	08001911 	.word	0x08001911
 80018a4:	080018db 	.word	0x080018db
 80018a8:	08001911 	.word	0x08001911
 80018ac:	08001911 	.word	0x08001911
 80018b0:	08001911 	.word	0x08001911
 80018b4:	080018ed 	.word	0x080018ed
 80018b8:	08001911 	.word	0x08001911
 80018bc:	08001911 	.word	0x08001911
 80018c0:	08001911 	.word	0x08001911
 80018c4:	080018ff 	.word	0x080018ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0202 	orr.w	r2, r2, #2
 80018d6:	60da      	str	r2, [r3, #12]
      break;
 80018d8:	e01d      	b.n	8001916 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0204 	orr.w	r2, r2, #4
 80018e8:	60da      	str	r2, [r3, #12]
      break;
 80018ea:	e014      	b.n	8001916 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0208 	orr.w	r2, r2, #8
 80018fa:	60da      	str	r2, [r3, #12]
      break;
 80018fc:	e00b      	b.n	8001916 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0210 	orr.w	r2, r2, #16
 800190c:	60da      	str	r2, [r3, #12]
      break;
 800190e:	e002      	b.n	8001916 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      break;
 8001914:	bf00      	nop
  }

  if (status == HAL_OK)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d14b      	bne.n	80019b4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fc5d 	bl	80021e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d107      	bne.n	8001944 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001942:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d018      	beq.n	8001980 <HAL_TIM_PWM_Start_IT+0x1a8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001956:	d013      	beq.n	8001980 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00e      	beq.n	8001980 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_TIM_PWM_Start_IT+0x1a8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a16      	ldr	r2, [pc, #88]	; (80019cc <HAL_TIM_PWM_Start_IT+0x1f4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d010      	beq.n	80019b4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a2:	e007      	b.n	80019b4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800
 80019cc:	40000c00 	.word	0x40000c00
 80019d0:	40014000 	.word	0x40014000

080019d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d122      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d11b      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0202 	mvn.w	r2, #2
 8001a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f9ba 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f9ac 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f9bd 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d122      	bne.n	8001a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d11b      	bne.n	8001a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0204 	mvn.w	r2, #4
 8001a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f990 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f982 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f993 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0208 	mvn.w	r2, #8
 8001aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2204      	movs	r2, #4
 8001aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f966 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f958 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f969 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0210 	mvn.w	r2, #16
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2208      	movs	r2, #8
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f93c 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f92e 	bl	8001d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f93f 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10e      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d107      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0201 	mvn.w	r2, #1
 8001b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f908 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b80      	cmp	r3, #128	; 0x80
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d107      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fb5f 	bl	8002242 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f904 	bl	8001db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0220 	mvn.w	r2, #32
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb29 	bl	800222e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0ae      	b.n	8001d60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	f200 809f 	bhi.w	8001d50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c12:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c4d 	.word	0x08001c4d
 8001c1c:	08001d51 	.word	0x08001d51
 8001c20:	08001d51 	.word	0x08001d51
 8001c24:	08001d51 	.word	0x08001d51
 8001c28:	08001c8d 	.word	0x08001c8d
 8001c2c:	08001d51 	.word	0x08001d51
 8001c30:	08001d51 	.word	0x08001d51
 8001c34:	08001d51 	.word	0x08001d51
 8001c38:	08001ccf 	.word	0x08001ccf
 8001c3c:	08001d51 	.word	0x08001d51
 8001c40:	08001d51 	.word	0x08001d51
 8001c44:	08001d51 	.word	0x08001d51
 8001c48:	08001d0f 	.word	0x08001d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f93a 	bl	8001ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0204 	bic.w	r2, r2, #4
 8001c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6999      	ldr	r1, [r3, #24]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	619a      	str	r2, [r3, #24]
      break;
 8001c8a:	e064      	b.n	8001d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f980 	bl	8001f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6999      	ldr	r1, [r3, #24]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	021a      	lsls	r2, r3, #8
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	619a      	str	r2, [r3, #24]
      break;
 8001ccc:	e043      	b.n	8001d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f9cb 	bl	8002070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0208 	orr.w	r2, r2, #8
 8001ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69da      	ldr	r2, [r3, #28]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0204 	bic.w	r2, r2, #4
 8001cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69d9      	ldr	r1, [r3, #28]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	61da      	str	r2, [r3, #28]
      break;
 8001d0c:	e023      	b.n	8001d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fa15 	bl	8002144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69d9      	ldr	r1, [r3, #28]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	61da      	str	r2, [r3, #28]
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	75fb      	strb	r3, [r7, #23]
      break;
 8001d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a34      	ldr	r2, [pc, #208]	; (8001eb0 <TIM_Base_SetConfig+0xe4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00f      	beq.n	8001e04 <TIM_Base_SetConfig+0x38>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d00b      	beq.n	8001e04 <TIM_Base_SetConfig+0x38>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <TIM_Base_SetConfig+0xe8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d007      	beq.n	8001e04 <TIM_Base_SetConfig+0x38>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a30      	ldr	r2, [pc, #192]	; (8001eb8 <TIM_Base_SetConfig+0xec>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <TIM_Base_SetConfig+0x38>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <TIM_Base_SetConfig+0xf0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <TIM_Base_SetConfig+0xe4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01b      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d017      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <TIM_Base_SetConfig+0xe8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <TIM_Base_SetConfig+0xec>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00f      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <TIM_Base_SetConfig+0xf0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00b      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <TIM_Base_SetConfig+0xf4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <TIM_Base_SetConfig+0xf8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <TIM_Base_SetConfig+0x8a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <TIM_Base_SetConfig+0xfc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d108      	bne.n	8001e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <TIM_Base_SetConfig+0xe4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d103      	bne.n	8001e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	615a      	str	r2, [r3, #20]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000800 	.word	0x40000800
 8001ebc:	40000c00 	.word	0x40000c00
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800

08001ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f023 0201 	bic.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f023 0302 	bic.w	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <TIM_OC1_SetConfig+0xc8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d10c      	bne.n	8001f42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f023 0308 	bic.w	r3, r3, #8
 8001f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <TIM_OC1_SetConfig+0xc8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d111      	bne.n	8001f6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	621a      	str	r2, [r3, #32]
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40010000 	.word	0x40010000

08001f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	f023 0210 	bic.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0320 	bic.w	r3, r3, #32
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <TIM_OC2_SetConfig+0xd4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10d      	bne.n	8002014 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <TIM_OC2_SetConfig+0xd4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d113      	bne.n	8002044 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800202a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	621a      	str	r2, [r3, #32]
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000

08002070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <TIM_OC3_SetConfig+0xd0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10d      	bne.n	80020ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <TIM_OC3_SetConfig+0xd0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d113      	bne.n	800211a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	621a      	str	r2, [r3, #32]
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40010000 	.word	0x40010000

08002144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800218e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	031b      	lsls	r3, r3, #12
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <TIM_OC4_SetConfig+0x9c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d109      	bne.n	80021b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	621a      	str	r2, [r3, #32]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000

080021e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e03f      	b.n	80022e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 fb63 	bl	8003948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2224      	movs	r2, #36	; 0x24
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002298:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fe24 	bl	8002ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	d17c      	bne.n	800240a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_UART_Transmit+0x2c>
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e075      	b.n	800240c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_UART_Transmit+0x3e>
 800232a:	2302      	movs	r3, #2
 800232c:	e06e      	b.n	800240c <HAL_UART_Transmit+0x11c>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2221      	movs	r2, #33	; 0x21
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002344:	f7fe f98c 	bl	8000660 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d108      	bne.n	8002372 <HAL_UART_Transmit+0x82>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e003      	b.n	800237a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002382:	e02a      	b.n	80023da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fb64 	bl	8002a5c <UART_WaitOnFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e036      	b.n	800240c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	3302      	adds	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e007      	b.n	80023cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1cf      	bne.n	8002384 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fb34 	bl	8002a5c <UART_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e006      	b.n	800240c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	d130      	bne.n	8002490 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_UART_Transmit_IT+0x26>
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e029      	b.n	8002492 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_UART_Transmit_IT+0x38>
 8002448:	2302      	movs	r3, #2
 800244a:	e022      	b.n	8002492 <HAL_UART_Transmit_IT+0x7e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2221      	movs	r2, #33	; 0x21
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800248a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	4613      	mov	r3, r2
 80024aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d11d      	bne.n	80024f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_UART_Receive_IT+0x26>
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e016      	b.n	80024f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Receive_IT+0x38>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e00f      	b.n	80024f6 <HAL_UART_Receive_IT+0x58>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fb24 	bl	8002b38 <UART_Start_Receive_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	e000      	b.n	80024f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0ba      	sub	sp, #232	; 0xe8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800253e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_UART_IRQHandler+0x66>
 8002552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fc07 	bl	8002d72 <UART_Receive_IT>
      return;
 8002564:	e256      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80de 	beq.w	800272c <HAL_UART_IRQHandler+0x22c>
 8002570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002580:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80d1 	beq.w	800272c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800258a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_UART_IRQHandler+0xae>
 8002596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_UART_IRQHandler+0xd2>
 80025ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0202 	orr.w	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_UART_IRQHandler+0xf6>
 80025de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d011      	beq.n	8002626 <HAL_UART_IRQHandler+0x126>
 8002602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0208 	orr.w	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 81ed 	beq.w	8002a0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_UART_IRQHandler+0x14e>
 800263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fb92 	bl	8002d72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b40      	cmp	r3, #64	; 0x40
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_UART_IRQHandler+0x17a>
 8002672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d04f      	beq.n	800271a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa9a 	bl	8002bb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d141      	bne.n	8002712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3314      	adds	r3, #20
 8002694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3314      	adds	r3, #20
 80026b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1d9      	bne.n	800268e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d013      	beq.n	800270a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4a7d      	ldr	r2, [pc, #500]	; (80028dc <HAL_UART_IRQHandler+0x3dc>)
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe f967 	bl	80009c2 <HAL_DMA_Abort_IT>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002704:	4610      	mov	r0, r2
 8002706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	e00e      	b.n	8002728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f990 	bl	8002a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	e00a      	b.n	8002728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f98c 	bl	8002a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	e006      	b.n	8002728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f988 	bl	8002a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002726:	e170      	b.n	8002a0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	bf00      	nop
    return;
 800272a:	e16e      	b.n	8002a0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	2b01      	cmp	r3, #1
 8002732:	f040 814a 	bne.w	80029ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8143 	beq.w	80029ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 813c 	beq.w	80029ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	f040 80b4 	bne.w	80028e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8140 	beq.w	8002a0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002796:	429a      	cmp	r2, r3
 8002798:	f080 8139 	bcs.w	8002a0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ae:	f000 8088 	beq.w	80028c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1d9      	bne.n	80027b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800280e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800282a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e1      	bne.n	80027fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800285e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800286c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e3      	bne.n	800283a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002892:	f023 0310 	bic.w	r3, r3, #16
 8002896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80028a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e3      	bne.n	8002880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe f810 	bl	80008e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8b6 	bl	8002a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028d8:	e099      	b.n	8002a0e <HAL_UART_IRQHandler+0x50e>
 80028da:	bf00      	nop
 80028dc:	08002c7b 	.word	0x08002c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 808b 	beq.w	8002a12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8086 	beq.w	8002a12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800291c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800292a:	647a      	str	r2, [r7, #68]	; 0x44
 800292c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002932:	e841 2300 	strex	r3, r2, [r1]
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e3      	bne.n	8002906 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	e853 3f00 	ldrex	r3, [r3]
 800294c:	623b      	str	r3, [r7, #32]
   return(result);
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3314      	adds	r3, #20
 800295e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002962:	633a      	str	r2, [r7, #48]	; 0x30
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e3      	bne.n	800293e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	e853 3f00 	ldrex	r3, [r3]
 8002992:	60fb      	str	r3, [r7, #12]
   return(result);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0310 	bic.w	r3, r3, #16
 800299a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	330c      	adds	r3, #12
 80029a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029a8:	61fa      	str	r2, [r7, #28]
 80029aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	69b9      	ldr	r1, [r7, #24]
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	617b      	str	r3, [r7, #20]
   return(result);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e3      	bne.n	8002984 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f83e 	bl	8002a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029c8:	e023      	b.n	8002a12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_UART_IRQHandler+0x4ea>
 80029d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f95d 	bl	8002ca2 <UART_Transmit_IT>
    return;
 80029e8:	e014      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00e      	beq.n	8002a14 <HAL_UART_IRQHandler+0x514>
 80029f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f99d 	bl	8002d42 <UART_EndTransmit_IT>
    return;
 8002a08:	e004      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
    return;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
      return;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <HAL_UART_IRQHandler+0x514>
      return;
 8002a12:	bf00      	nop
  }
}
 8002a14:	37e8      	adds	r7, #232	; 0xe8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop

08002a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b090      	sub	sp, #64	; 0x40
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6c:	e050      	b.n	8002b10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d04c      	beq.n	8002b10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a7c:	f7fd fdf0 	bl	8000660 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d241      	bcs.n	8002b10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	e853 3f00 	ldrex	r3, [r3]
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aac:	637a      	str	r2, [r7, #52]	; 0x34
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab4:	e841 2300 	strex	r3, r2, [r1]
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e5      	bne.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	e853 3f00 	ldrex	r3, [r3]
 8002ace:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae0:	623a      	str	r2, [r7, #32]
 8002ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae4:	69f9      	ldr	r1, [r7, #28]
 8002ae6:	6a3a      	ldr	r2, [r7, #32]
 8002ae8:	e841 2300 	strex	r3, r2, [r1]
 8002aec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e5      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e00f      	b.n	8002b30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d09f      	beq.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3740      	adds	r7, #64	; 0x40
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2222      	movs	r2, #34	; 0x22
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b095      	sub	sp, #84	; 0x54
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c18:	e841 2300 	strex	r3, r2, [r1]
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e5      	bne.n	8002bf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d119      	bne.n	8002c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 0310 	bic.w	r3, r3, #16
 8002c42:	647b      	str	r3, [r7, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c4c:	61ba      	str	r2, [r7, #24]
 8002c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c6e:	bf00      	nop
 8002c70:	3754      	adds	r7, #84	; 0x54
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fecb 	bl	8002a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b21      	cmp	r3, #33	; 0x21
 8002cb4:	d13e      	bne.n	8002d34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d114      	bne.n	8002cea <UART_Transmit_IT+0x48>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d110      	bne.n	8002cea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	621a      	str	r2, [r3, #32]
 8002ce8:	e008      	b.n	8002cfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	1c59      	adds	r1, r3, #1
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6211      	str	r1, [r2, #32]
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe5a 	bl	8002a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08c      	sub	sp, #48	; 0x30
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b22      	cmp	r3, #34	; 0x22
 8002d84:	f040 80ab 	bne.w	8002ede <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d90:	d117      	bne.n	8002dc2 <UART_Receive_IT+0x50>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	1c9a      	adds	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc0:	e026      	b.n	8002e10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d007      	beq.n	8002de6 <UART_Receive_IT+0x74>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <UART_Receive_IT+0x82>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e008      	b.n	8002e06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d15a      	bne.n	8002eda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0220 	bic.w	r2, r2, #32
 8002e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d135      	bne.n	8002ed0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f023 0310 	bic.w	r3, r3, #16
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	623a      	str	r2, [r7, #32]
 8002e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	69f9      	ldr	r1, [r7, #28]
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e5      	bne.n	8002e6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d10a      	bne.n	8002ec2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fdbb 	bl	8002a44 <HAL_UARTEx_RxEventCallback>
 8002ece:	e002      	b.n	8002ed6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fd89 	bl	80039e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e002      	b.n	8002ee0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3730      	adds	r7, #48	; 0x30
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b0c0      	sub	sp, #256	; 0x100
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	ea40 0301 	orr.w	r3, r0, r1
 8002f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f40:	f021 010c 	bic.w	r1, r1, #12
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	6999      	ldr	r1, [r3, #24]
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	ea40 0301 	orr.w	r3, r0, r1
 8002f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8f      	ldr	r3, [pc, #572]	; (80031b4 <UART_SetConfig+0x2cc>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d005      	beq.n	8002f88 <UART_SetConfig+0xa0>
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b8d      	ldr	r3, [pc, #564]	; (80031b8 <UART_SetConfig+0x2d0>)
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d104      	bne.n	8002f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7fe fb06 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 8002f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f90:	e003      	b.n	8002f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7fe faed 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
 8002f96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	f040 810c 	bne.w	80031c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	1891      	adds	r1, r2, r2
 8002fc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fc2:	415b      	adcs	r3, r3
 8002fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fca:	4621      	mov	r1, r4
 8002fcc:	eb12 0801 	adds.w	r8, r2, r1
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb43 0901 	adc.w	r9, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fea:	4690      	mov	r8, r2
 8002fec:	4699      	mov	r9, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	eb18 0303 	adds.w	r3, r8, r3
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	eb49 0303 	adc.w	r3, r9, r3
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003016:	460b      	mov	r3, r1
 8003018:	18db      	adds	r3, r3, r3
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
 800301c:	4613      	mov	r3, r2
 800301e:	eb42 0303 	adc.w	r3, r2, r3
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
 8003024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800302c:	f7fd f930 	bl	8000290 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <UART_SetConfig+0x2d4>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	011c      	lsls	r4, r3, #4
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800304c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	1891      	adds	r1, r2, r2
 8003056:	64b9      	str	r1, [r7, #72]	; 0x48
 8003058:	415b      	adcs	r3, r3
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003060:	4641      	mov	r1, r8
 8003062:	eb12 0a01 	adds.w	sl, r2, r1
 8003066:	4649      	mov	r1, r9
 8003068:	eb43 0b01 	adc.w	fp, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800307c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003080:	4692      	mov	sl, r2
 8003082:	469b      	mov	fp, r3
 8003084:	4643      	mov	r3, r8
 8003086:	eb1a 0303 	adds.w	r3, sl, r3
 800308a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308e:	464b      	mov	r3, r9
 8003090:	eb4b 0303 	adc.w	r3, fp, r3
 8003094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030ac:	460b      	mov	r3, r1
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	643b      	str	r3, [r7, #64]	; 0x40
 80030b2:	4613      	mov	r3, r2
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030c2:	f7fd f8e5 	bl	8000290 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <UART_SetConfig+0x2d4>)
 80030ce:	fba3 2301 	umull	r2, r3, r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <UART_SetConfig+0x2d4>)
 80030e4:	fba3 2302 	umull	r2, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f0:	441c      	add	r4, r3
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	63b9      	str	r1, [r7, #56]	; 0x38
 800310c:	415b      	adcs	r3, r3
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003114:	4641      	mov	r1, r8
 8003116:	1851      	adds	r1, r2, r1
 8003118:	6339      	str	r1, [r7, #48]	; 0x30
 800311a:	4649      	mov	r1, r9
 800311c:	414b      	adcs	r3, r1
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800312c:	4659      	mov	r1, fp
 800312e:	00cb      	lsls	r3, r1, #3
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003136:	4651      	mov	r1, sl
 8003138:	00ca      	lsls	r2, r1, #3
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	4603      	mov	r3, r0
 8003140:	4642      	mov	r2, r8
 8003142:	189b      	adds	r3, r3, r2
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003148:	464b      	mov	r3, r9
 800314a:	460a      	mov	r2, r1
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003168:	460b      	mov	r3, r1
 800316a:	18db      	adds	r3, r3, r3
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
 800316e:	4613      	mov	r3, r2
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800317a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317e:	f7fd f887 	bl	8000290 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <UART_SetConfig+0x2d4>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	; 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <UART_SetConfig+0x2d4>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4422      	add	r2, r4
 80031ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031b0:	e105      	b.n	80033be <UART_SetConfig+0x4d6>
 80031b2:	bf00      	nop
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	6239      	str	r1, [r7, #32]
 80031da:	415b      	adcs	r3, r3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e2:	4641      	mov	r1, r8
 80031e4:	1854      	adds	r4, r2, r1
 80031e6:	4649      	mov	r1, r9
 80031e8:	eb43 0501 	adc.w	r5, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	00eb      	lsls	r3, r5, #3
 80031f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fa:	00e2      	lsls	r2, r4, #3
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	4643      	mov	r3, r8
 8003202:	18e3      	adds	r3, r4, r3
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003208:	464b      	mov	r3, r9
 800320a:	eb45 0303 	adc.w	r3, r5, r3
 800320e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322e:	4629      	mov	r1, r5
 8003230:	008b      	lsls	r3, r1, #2
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003238:	4621      	mov	r1, r4
 800323a:	008a      	lsls	r2, r1, #2
 800323c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003240:	f7fd f826 	bl	8000290 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b60      	ldr	r3, [pc, #384]	; (80033cc <UART_SetConfig+0x4e4>)
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	011c      	lsls	r4, r3, #4
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800325c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	1891      	adds	r1, r2, r2
 800326a:	61b9      	str	r1, [r7, #24]
 800326c:	415b      	adcs	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	4641      	mov	r1, r8
 8003276:	1851      	adds	r1, r2, r1
 8003278:	6139      	str	r1, [r7, #16]
 800327a:	4649      	mov	r1, r9
 800327c:	414b      	adcs	r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	00cb      	lsls	r3, r1, #3
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003296:	4651      	mov	r1, sl
 8003298:	00ca      	lsls	r2, r1, #3
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	4642      	mov	r2, r8
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a8:	464b      	mov	r3, r9
 80032aa:	460a      	mov	r2, r1
 80032ac:	eb42 0303 	adc.w	r3, r2, r3
 80032b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032cc:	4649      	mov	r1, r9
 80032ce:	008b      	lsls	r3, r1, #2
 80032d0:	4641      	mov	r1, r8
 80032d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d6:	4641      	mov	r1, r8
 80032d8:	008a      	lsls	r2, r1, #2
 80032da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032de:	f7fc ffd7 	bl	8000290 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <UART_SetConfig+0x4e4>)
 80032e8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	3332      	adds	r3, #50	; 0x32
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <UART_SetConfig+0x4e4>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003306:	441c      	add	r4, r3
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	673b      	str	r3, [r7, #112]	; 0x70
 8003310:	677a      	str	r2, [r7, #116]	; 0x74
 8003312:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003316:	4642      	mov	r2, r8
 8003318:	464b      	mov	r3, r9
 800331a:	1891      	adds	r1, r2, r2
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	415b      	adcs	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003326:	4641      	mov	r1, r8
 8003328:	1851      	adds	r1, r2, r1
 800332a:	6039      	str	r1, [r7, #0]
 800332c:	4649      	mov	r1, r9
 800332e:	414b      	adcs	r3, r1
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333e:	4659      	mov	r1, fp
 8003340:	00cb      	lsls	r3, r1, #3
 8003342:	4651      	mov	r1, sl
 8003344:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003348:	4651      	mov	r1, sl
 800334a:	00ca      	lsls	r2, r1, #3
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	4603      	mov	r3, r0
 8003352:	4642      	mov	r2, r8
 8003354:	189b      	adds	r3, r3, r2
 8003356:	66bb      	str	r3, [r7, #104]	; 0x68
 8003358:	464b      	mov	r3, r9
 800335a:	460a      	mov	r2, r1
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
 800336c:	667a      	str	r2, [r7, #100]	; 0x64
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800337a:	4649      	mov	r1, r9
 800337c:	008b      	lsls	r3, r1, #2
 800337e:	4641      	mov	r1, r8
 8003380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003384:	4641      	mov	r1, r8
 8003386:	008a      	lsls	r2, r1, #2
 8003388:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338c:	f7fc ff80 	bl	8000290 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_SetConfig+0x4e4>)
 8003396:	fba3 1302 	umull	r1, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2164      	movs	r1, #100	; 0x64
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	; 0x32
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <UART_SetConfig+0x4e4>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4422      	add	r2, r4
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	bf00      	nop
 80033c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	51eb851f 	.word	0x51eb851f

080033d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <MX_GPIO_Init+0x84>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <MX_GPIO_Init+0x84>)
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <MX_GPIO_Init+0x84>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <MX_GPIO_Init+0x84>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <MX_GPIO_Init+0x84>)
 80033fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <MX_GPIO_Init+0x84>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <MX_GPIO_Init+0x84>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <MX_GPIO_Init+0x84>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <MX_GPIO_Init+0x84>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_GPIO_Init+0x84>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <MX_GPIO_Init+0x84>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <MX_GPIO_Init+0x84>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]

}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b096      	sub	sp, #88	; 0x58
 800345c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800345e:	f7fd f899 	bl	8000594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003462:	f000 f877 	bl	8003554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003466:	f7ff ffb3 	bl	80033d0 <MX_GPIO_Init>
  MX_TIM11_Init();
 800346a:	f000 f993 	bl	8003794 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 800346e:	f000 fa41 	bl	80038f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8003472:	482e      	ldr	r0, [pc, #184]	; (800352c <main+0xd4>)
 8003474:	f7fe f8f4 	bl	8001660 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8003478:	2100      	movs	r1, #0
 800347a:	482c      	ldr	r0, [pc, #176]	; (800352c <main+0xd4>)
 800347c:	f7fe f9ac 	bl	80017d8 <HAL_TIM_PWM_Start_IT>
  uint8_t hello1[]="hello,blocking\n";
 8003480:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <main+0xd8>)
 8003482:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart1, hello1, sizeof(hello1), 500);
 800348c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003490:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003494:	2210      	movs	r2, #16
 8003496:	4827      	ldr	r0, [pc, #156]	; (8003534 <main+0xdc>)
 8003498:	f7fe ff2a 	bl	80022f0 <HAL_UART_Transmit>
  HAL_Delay(10);
 800349c:	200a      	movs	r0, #10
 800349e:	f7fd f8eb 	bl	8000678 <HAL_Delay>
  uint8_t hello2[]="hello,none blocking\n";
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <main+0xe0>)
 80034a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80034a8:	461d      	mov	r5, r3
 80034aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	3404      	adds	r4, #4
 80034b6:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit_IT(&huart1, hello2, sizeof(hello2));
 80034b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034bc:	2215      	movs	r2, #21
 80034be:	4619      	mov	r1, r3
 80034c0:	481c      	ldr	r0, [pc, #112]	; (8003534 <main+0xdc>)
 80034c2:	f7fe ffa7 	bl	8002414 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1, rxBuffer, RX_CMD_LEN);
 80034c6:	2207      	movs	r2, #7
 80034c8:	491c      	ldr	r1, [pc, #112]	; (800353c <main+0xe4>)
 80034ca:	481a      	ldr	r0, [pc, #104]	; (8003534 <main+0xdc>)
 80034cc:	f7fe ffe7 	bl	800249e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  periodWidth1= __HAL_TIM_GET_AUTORELOAD(&htim11);
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <main+0xd4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <main+0xe8>)
 80034da:	801a      	strh	r2, [r3, #0]
	  pulseWidth1=__HAL_TIM_GET_COMPARE(&htim11,TIM_CHANNEL_1);
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <main+0xd4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <main+0xec>)
 80034e6:	801a      	strh	r2, [r3, #0]
	  uint16_t ddsStr[20];
	  sprintf(ddsStr,"%2d,%2d,%2d\n",prescalerWidth,periodWidth1,pulseWidth1 );
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <main+0xf0>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <main+0xe8>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <main+0xec>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	4638      	mov	r0, r7
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	4913      	ldr	r1, [pc, #76]	; (800354c <main+0xf4>)
 8003500:	f000 fbc6 	bl	8003c90 <siprintf>

	  if(isUploadTime){
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <main+0xf8>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <main+0xca>
		  HAL_UART_Transmit(&huart1, ddsStr, strlen(ddsStr), 200);
 800350c:	463b      	mov	r3, r7
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc fe66 	bl	80001e0 <strlen>
 8003514:	4603      	mov	r3, r0
 8003516:	b29a      	uxth	r2, r3
 8003518:	4639      	mov	r1, r7
 800351a:	23c8      	movs	r3, #200	; 0xc8
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <main+0xdc>)
 800351e:	f7fe fee7 	bl	80022f0 <HAL_UART_Transmit>
	  }
//	  __HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,pulseWidth);
//	  pulseWidth++;
	  HAL_Delay(500);
 8003522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003526:	f7fd f8a7 	bl	8000678 <HAL_Delay>
  {
 800352a:	e7d1      	b.n	80034d0 <main+0x78>
 800352c:	200000b4 	.word	0x200000b4
 8003530:	08004594 	.word	0x08004594
 8003534:	20000100 	.word	0x20000100
 8003538:	080045a4 	.word	0x080045a4
 800353c:	2000001c 	.word	0x2000001c
 8003540:	200000ac 	.word	0x200000ac
 8003544:	200000ae 	.word	0x200000ae
 8003548:	20000006 	.word	0x20000006
 800354c:	08004584 	.word	0x08004584
 8003550:	20000026 	.word	0x20000026

08003554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b094      	sub	sp, #80	; 0x50
 8003558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	2230      	movs	r2, #48	; 0x30
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb8c 	bl	8003c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	4b28      	ldr	r3, [pc, #160]	; (8003620 <SystemClock_Config+0xcc>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <SystemClock_Config+0xcc>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6413      	str	r3, [r2, #64]	; 0x40
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <SystemClock_Config+0xcc>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003594:	2300      	movs	r3, #0
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <SystemClock_Config+0xd0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <SystemClock_Config+0xd0>)
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <SystemClock_Config+0xd0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035b4:	2301      	movs	r3, #1
 80035b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035be:	2302      	movs	r3, #2
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80035c8:	2319      	movs	r3, #25
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035cc:	23a8      	movs	r3, #168	; 0xa8
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035d0:	2302      	movs	r3, #2
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035d4:	2304      	movs	r3, #4
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035d8:	f107 0320 	add.w	r3, r7, #32
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fb97 	bl	8000d10 <HAL_RCC_OscConfig>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80035e8:	f000 f81e 	bl	8003628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ec:	230f      	movs	r3, #15
 80035ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035f0:	2302      	movs	r3, #2
 80035f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fdf9 	bl	8001200 <HAL_RCC_ClockConfig>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003614:	f000 f808 	bl	8003628 <Error_Handler>
  }
}
 8003618:	bf00      	nop
 800361a:	3750      	adds	r7, #80	; 0x50
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000

08003628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800362c:	b672      	cpsid	i
}
 800362e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003630:	e7fe      	b.n	8003630 <Error_Handler+0x8>
	...

08003634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_MspInit+0x4c>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_MspInit+0x4c>)
 8003644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003648:	6453      	str	r3, [r2, #68]	; 0x44
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <HAL_MspInit+0x4c>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_MspInit+0x4c>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_MspInit+0x4c>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_MspInit+0x4c>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003672:	2005      	movs	r0, #5
 8003674:	f7fd f8f4 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800

08003684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003688:	e7fe      	b.n	8003688 <NMI_Handler+0x4>

0800368a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <HardFault_Handler+0x4>

08003690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <MemManage_Handler+0x4>

08003696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d0:	f7fc ffb2 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80036de:	f7fe f979 	bl	80019d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200000b4 	.word	0x200000b4

080036ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036f0:	4803      	ldr	r0, [pc, #12]	; (8003700 <USART1_IRQHandler+0x14>)
 80036f2:	f7fe ff05 	bl	8002500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  on_UART_IDLE(&huart1);
 80036f6:	4802      	ldr	r0, [pc, #8]	; (8003700 <USART1_IRQHandler+0x14>)
 80036f8:	f000 f9a8 	bl	8003a4c <on_UART_IDLE>
  /* USER CODE END USART1_IRQn 1 */
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000100 	.word	0x20000100

08003704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <_sbrk+0x5c>)
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <_sbrk+0x60>)
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <_sbrk+0x64>)
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <_sbrk+0x68>)
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d207      	bcs.n	8003744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003734:	f000 fa7a 	bl	8003c2c <__errno>
 8003738:	4603      	mov	r3, r0
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	e009      	b.n	8003758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <_sbrk+0x64>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <_sbrk+0x64>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <_sbrk+0x64>)
 8003754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20010000 	.word	0x20010000
 8003764:	00000400 	.word	0x00000400
 8003768:	200000b0 	.word	0x200000b0
 800376c:	20000158 	.word	0x20000158

08003770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <SystemInit+0x20>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <SystemInit+0x20>)
 800377c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
 80037a8:	615a      	str	r2, [r3, #20]
 80037aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <MX_TIM11_Init+0x94>)
 80037ae:	4a1f      	ldr	r2, [pc, #124]	; (800382c <MX_TIM11_Init+0x98>)
 80037b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <MX_TIM11_Init+0x94>)
 80037b4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80037b8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <MX_TIM11_Init+0x94>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 200-1;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <MX_TIM11_Init+0x94>)
 80037c2:	22c7      	movs	r2, #199	; 0xc7
 80037c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <MX_TIM11_Init+0x94>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <MX_TIM11_Init+0x94>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80037d2:	4815      	ldr	r0, [pc, #84]	; (8003828 <MX_TIM11_Init+0x94>)
 80037d4:	f7fd fef4 	bl	80015c0 <HAL_TIM_Base_Init>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80037de:	f7ff ff23 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80037e2:	4811      	ldr	r0, [pc, #68]	; (8003828 <MX_TIM11_Init+0x94>)
 80037e4:	f7fd ff9e 	bl	8001724 <HAL_TIM_PWM_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80037ee:	f7ff ff1b 	bl	8003628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037f2:	2360      	movs	r3, #96	; 0x60
 80037f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80037f6:	2332      	movs	r3, #50	; 0x32
 80037f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2200      	movs	r2, #0
 8003806:	4619      	mov	r1, r3
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <MX_TIM11_Init+0x94>)
 800380a:	f7fe f9eb 	bl	8001be4 <HAL_TIM_PWM_ConfigChannel>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003814:	f7ff ff08 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <MX_TIM11_Init+0x94>)
 800381a:	f000 f831 	bl	8003880 <HAL_TIM_MspPostInit>

}
 800381e:	bf00      	nop
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200000b4 	.word	0x200000b4
 800382c:	40014800 	.word	0x40014800

08003830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <HAL_TIM_Base_MspInit+0x48>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d115      	bne.n	800386e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_TIM_Base_MspInit+0x4c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_TIM_Base_MspInit+0x4c>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_TIM_Base_MspInit+0x4c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 800385e:	2200      	movs	r2, #0
 8003860:	2101      	movs	r1, #1
 8003862:	201a      	movs	r0, #26
 8003864:	f7fd f807 	bl	8000876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003868:	201a      	movs	r0, #26
 800386a:	f7fd f820 	bl	80008ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40014800 	.word	0x40014800
 800387c:	40023800 	.word	0x40023800

08003880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 030c 	add.w	r3, r7, #12
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_TIM_MspPostInit+0x68>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d11e      	bne.n	80038e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_TIM_MspPostInit+0x6c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_TIM_MspPostInit+0x6c>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_TIM_MspPostInit+0x6c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80038d0:	2303      	movs	r3, #3
 80038d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4619      	mov	r1, r3
 80038da:	4805      	ldr	r0, [pc, #20]	; (80038f0 <HAL_TIM_MspPostInit+0x70>)
 80038dc:	f7fd f894 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40014800 	.word	0x40014800
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020400 	.word	0x40020400

080038f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <MX_USART1_UART_Init+0x50>)
 80038fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 8003900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 8003914:	2200      	movs	r2, #0
 8003916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 800391a:	220c      	movs	r2, #12
 800391c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 8003926:	2200      	movs	r2, #0
 8003928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800392a:	4805      	ldr	r0, [pc, #20]	; (8003940 <MX_USART1_UART_Init+0x4c>)
 800392c:	f7fe fc93 	bl	8002256 <HAL_UART_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003936:	f7ff fe77 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000100 	.word	0x20000100
 8003944:	40011000 	.word	0x40011000

08003948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <HAL_UART_MspInit+0x94>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d134      	bne.n	80039d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_UART_MspInit+0x98>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_UART_MspInit+0x98>)
 8003974:	f043 0310 	orr.w	r3, r3, #16
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_UART_MspInit+0x98>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_UART_MspInit+0x98>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <HAL_UART_MspInit+0x98>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6313      	str	r3, [r2, #48]	; 0x30
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_UART_MspInit+0x98>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	2302      	movs	r3, #2
 80039aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b0:	2303      	movs	r3, #3
 80039b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b4:	2307      	movs	r3, #7
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	4619      	mov	r1, r3
 80039be:	4809      	ldr	r0, [pc, #36]	; (80039e4 <HAL_UART_MspInit+0x9c>)
 80039c0:	f7fd f822 	bl	8000a08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2101      	movs	r1, #1
 80039c8:	2025      	movs	r0, #37	; 0x25
 80039ca:	f7fc ff54 	bl	8000876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039ce:	2025      	movs	r0, #37	; 0x25
 80039d0:	f7fc ff6d 	bl	80008ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039d4:	bf00      	nop
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40011000 	.word	0x40011000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40020000 	.word	0x40020000

080039e8 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <HAL_UART_RxCpltCallback+0x54>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d119      	bne.n	8003a2e <HAL_UART_RxCpltCallback+0x46>
	{
		//接收到固定长度数据后使能UART_IT_IDLE中断，在UART_IT_IDLE中断里再次接收
		rxCompleted=SET;	//接收完成
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_UART_RxCpltCallback+0x58>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<RX_CMD_LEN;i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	81fb      	strh	r3, [r7, #14]
 8003a04:	e008      	b.n	8003a18 <HAL_UART_RxCpltCallback+0x30>
			proBuffer[i]=rxBuffer[i];
 8003a06:	89fa      	ldrh	r2, [r7, #14]
 8003a08:	89fb      	ldrh	r3, [r7, #14]
 8003a0a:	490e      	ldr	r1, [pc, #56]	; (8003a44 <HAL_UART_RxCpltCallback+0x5c>)
 8003a0c:	5c89      	ldrb	r1, [r1, r2]
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <HAL_UART_RxCpltCallback+0x60>)
 8003a10:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i=0;i<RX_CMD_LEN;i++)
 8003a12:	89fb      	ldrh	r3, [r7, #14]
 8003a14:	3301      	adds	r3, #1
 8003a16:	81fb      	strh	r3, [r7, #14]
 8003a18:	89fb      	ldrh	r3, [r7, #14]
 8003a1a:	2b06      	cmp	r3, #6
 8003a1c:	d9f3      	bls.n	8003a06 <HAL_UART_RxCpltCallback+0x1e>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE); //接收到数据后才开启 IDLE中断
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0210 	orr.w	r2, r2, #16
 8003a2c:	60da      	str	r2, [r3, #12]
	}
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40011000 	.word	0x40011000
 8003a40:	200000fc 	.word	0x200000fc
 8003a44:	2000001c 	.word	0x2000001c
 8003a48:	20000010 	.word	0x20000010

08003a4c <on_UART_IDLE>:

void	on_UART_IDLE(UART_HandleTypeDef *huart)		//在串口IDLE时处理
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == RESET)	//IDLE中断挂起标志位是否置位
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d12e      	bne.n	8003ac0 <on_UART_IDLE+0x74>
		return;

	__HAL_UART_CLEAR_IDLEFLAG(huart); 	//清除IDLE挂起标志
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE); 	//禁止IDLE事件中断
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	60da      	str	r2, [r3, #12]
	if (rxCompleted)	//接收到1条指令
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <on_UART_IDLE+0x7c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d018      	beq.n	8003ac2 <on_UART_IDLE+0x76>
	{
		HAL_UART_Transmit(huart,proBuffer, strlen(proBuffer), 200); //返回接收到的指令字符�?
 8003a90:	480e      	ldr	r0, [pc, #56]	; (8003acc <on_UART_IDLE+0x80>)
 8003a92:	f7fc fba5 	bl	80001e0 <strlen>
 8003a96:	4603      	mov	r3, r0
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	23c8      	movs	r3, #200	; 0xc8
 8003a9c:	490b      	ldr	r1, [pc, #44]	; (8003acc <on_UART_IDLE+0x80>)
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fc26 	bl	80022f0 <HAL_UART_Transmit>
		HAL_Delay(10);  //需要适当延时，否则updateRTCTime()函数处理可能出错
 8003aa4:	200a      	movs	r0, #10
 8003aa6:	f7fc fde7 	bl	8000678 <HAL_Delay>
		updateRTCTime();  //更新RTC时间
 8003aaa:	f000 f813 	bl	8003ad4 <updateRTCTime>
//		LCD_ShowStr(30,170, (uint8_t *)proBuffer);  //显示接收到的指令字符串

		rxCompleted=RESET;
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <on_UART_IDLE+0x7c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, rxBuffer, RX_CMD_LEN);	//再次启动串口接收
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	4906      	ldr	r1, [pc, #24]	; (8003ad0 <on_UART_IDLE+0x84>)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fe fcf0 	bl	800249e <HAL_UART_Receive_IT>
 8003abe:	e000      	b.n	8003ac2 <on_UART_IDLE+0x76>
		return;
 8003ac0:	bf00      	nop

	}

}
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200000fc 	.word	0x200000fc
 8003acc:	20000010 	.word	0x20000010
 8003ad0:	2000001c 	.word	0x2000001c

08003ad4 <updateRTCTime>:
void updateRTCTime()	//根据串口接收的指令字符串进行处理
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
	if (proBuffer[0] != '#')	//非有效指�???
 8003ada:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <updateRTCTime+0xec>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b23      	cmp	r3, #35	; 0x23
 8003ae0:	d167      	bne.n	8003bb2 <updateRTCTime+0xde>
		return;

	uint16_t	timeSection=proBuffer[1];	//类型字符
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <updateRTCTime+0xec>)
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	81fb      	strh	r3, [r7, #14]
	uint16_t	tmp1000=proBuffer[2]-0x30;	//十位�???
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <updateRTCTime+0xec>)
 8003aea:	789b      	ldrb	r3, [r3, #2]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b30      	subs	r3, #48	; 0x30
 8003af0:	81bb      	strh	r3, [r7, #12]
	uint16_t	tmp100=proBuffer[3]-0x30;	//十位�???
 8003af2:	4b33      	ldr	r3, [pc, #204]	; (8003bc0 <updateRTCTime+0xec>)
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b30      	subs	r3, #48	; 0x30
 8003afa:	817b      	strh	r3, [r7, #10]
	uint16_t	tmp10=proBuffer[4]-0x30;	//十位�???
 8003afc:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <updateRTCTime+0xec>)
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b30      	subs	r3, #48	; 0x30
 8003b04:	813b      	strh	r3, [r7, #8]
	uint16_t	tmp1 =proBuffer[5]-0x30;	//个位�???
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <updateRTCTime+0xec>)
 8003b08:	795b      	ldrb	r3, [r3, #5]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b30      	subs	r3, #48	; 0x30
 8003b0e:	80fb      	strh	r3, [r7, #6]
	uint16_t	val=1000*tmp1000+100*tmp100+10*tmp10+tmp1;
 8003b10:	89bb      	ldrh	r3, [r7, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	0152      	lsls	r2, r2, #5
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	4619      	mov	r1, r3
 8003b24:	0089      	lsls	r1, r1, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	4619      	mov	r1, r3
 8003b2a:	0088      	lsls	r0, r1, #2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	440b      	add	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	893b      	ldrh	r3, [r7, #8]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	0089      	lsls	r1, r1, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	80bb      	strh	r3, [r7, #4]
	if (timeSection=='U')	//是否上传RTC时间
 8003b50:	89fb      	ldrh	r3, [r7, #14]
 8003b52:	2b55      	cmp	r3, #85	; 0x55
 8003b54:	d104      	bne.n	8003b60 <updateRTCTime+0x8c>
	{
		isUploadTime=val;
 8003b56:	88bb      	ldrh	r3, [r7, #4]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <updateRTCTime+0xf0>)
 8003b5c:	701a      	strb	r2, [r3, #0]
		return;
 8003b5e:	e029      	b.n	8003bb4 <updateRTCTime+0xe0>

//	RTC_TimeTypeDef sTime;
//	RTC_DateTypeDef sDate;


		if (timeSection=='Q'){
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	2b51      	cmp	r3, #81	; 0x51
 8003b64:	d108      	bne.n	8003b78 <updateRTCTime+0xa4>
			prescalerWidth=val;
 8003b66:	88bb      	ldrh	r3, [r7, #4]
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <updateRTCTime+0xf4>)
 8003b6a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_PRESCALER(&htim11,prescalerWidth);
 8003b6c:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <updateRTCTime+0xf4>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <updateRTCTime+0xf8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
 8003b76:	e01d      	b.n	8003bb4 <updateRTCTime+0xe0>
		}
		else if (timeSection=='W'){
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	2b57      	cmp	r3, #87	; 0x57
 8003b7c:	d10d      	bne.n	8003b9a <updateRTCTime+0xc6>
			periodWidth=val;
 8003b7e:	88bb      	ldrh	r3, [r7, #4]
 8003b80:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <updateRTCTime+0xfc>)
 8003b82:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim11,periodWidth);
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <updateRTCTime+0xfc>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <updateRTCTime+0xf8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <updateRTCTime+0xfc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <updateRTCTime+0xf8>)
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e00c      	b.n	8003bb4 <updateRTCTime+0xe0>
		}
		else if (timeSection=='E'){
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	2b45      	cmp	r3, #69	; 0x45
 8003b9e:	d109      	bne.n	8003bb4 <updateRTCTime+0xe0>
			pulseWidth=val;
 8003ba0:	88bb      	ldrh	r3, [r7, #4]
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <updateRTCTime+0x100>)
 8003ba4:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim11,TIM_CHANNEL_1,pulseWidth);
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <updateRTCTime+0x100>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <updateRTCTime+0xf8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34
 8003bb0:	e000      	b.n	8003bb4 <updateRTCTime+0xe0>
		return;
 8003bb2:	bf00      	nop
		}

}
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000010 	.word	0x20000010
 8003bc4:	20000026 	.word	0x20000026
 8003bc8:	20000006 	.word	0x20000006
 8003bcc:	200000b4 	.word	0x200000b4
 8003bd0:	20000008 	.word	0x20000008
 8003bd4:	2000000a 	.word	0x2000000a

08003bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bdc:	480d      	ldr	r0, [pc, #52]	; (8003c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bde:	490e      	ldr	r1, [pc, #56]	; (8003c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be4:	e002      	b.n	8003bec <LoopCopyDataInit>

08003be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bea:	3304      	adds	r3, #4

08003bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf0:	d3f9      	bcc.n	8003be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bf4:	4c0b      	ldr	r4, [pc, #44]	; (8003c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bf8:	e001      	b.n	8003bfe <LoopFillZerobss>

08003bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bfc:	3204      	adds	r2, #4

08003bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c00:	d3fb      	bcc.n	8003bfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c02:	f7ff fdb5 	bl	8003770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c06:	f000 f817 	bl	8003c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c0a:	f7ff fc25 	bl	8003458 <main>
  bx  lr    
 8003c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c18:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003c1c:	08004618 	.word	0x08004618
  ldr r2, =_sbss
 8003c20:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003c24:	20000154 	.word	0x20000154

08003c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <ADC_IRQHandler>
	...

08003c2c <__errno>:
 8003c2c:	4b01      	ldr	r3, [pc, #4]	; (8003c34 <__errno+0x8>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000028 	.word	0x20000028

08003c38 <__libc_init_array>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	4d0d      	ldr	r5, [pc, #52]	; (8003c70 <__libc_init_array+0x38>)
 8003c3c:	4c0d      	ldr	r4, [pc, #52]	; (8003c74 <__libc_init_array+0x3c>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	2600      	movs	r6, #0
 8003c44:	42a6      	cmp	r6, r4
 8003c46:	d109      	bne.n	8003c5c <__libc_init_array+0x24>
 8003c48:	4d0b      	ldr	r5, [pc, #44]	; (8003c78 <__libc_init_array+0x40>)
 8003c4a:	4c0c      	ldr	r4, [pc, #48]	; (8003c7c <__libc_init_array+0x44>)
 8003c4c:	f000 fc8e 	bl	800456c <_init>
 8003c50:	1b64      	subs	r4, r4, r5
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	2600      	movs	r6, #0
 8003c56:	42a6      	cmp	r6, r4
 8003c58:	d105      	bne.n	8003c66 <__libc_init_array+0x2e>
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c60:	4798      	blx	r3
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7ee      	b.n	8003c44 <__libc_init_array+0xc>
 8003c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6a:	4798      	blx	r3
 8003c6c:	3601      	adds	r6, #1
 8003c6e:	e7f2      	b.n	8003c56 <__libc_init_array+0x1e>
 8003c70:	08004610 	.word	0x08004610
 8003c74:	08004610 	.word	0x08004610
 8003c78:	08004610 	.word	0x08004610
 8003c7c:	08004614 	.word	0x08004614

08003c80 <memset>:
 8003c80:	4402      	add	r2, r0
 8003c82:	4603      	mov	r3, r0
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d100      	bne.n	8003c8a <memset+0xa>
 8003c88:	4770      	bx	lr
 8003c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8e:	e7f9      	b.n	8003c84 <memset+0x4>

08003c90 <siprintf>:
 8003c90:	b40e      	push	{r1, r2, r3}
 8003c92:	b500      	push	{lr}
 8003c94:	b09c      	sub	sp, #112	; 0x70
 8003c96:	ab1d      	add	r3, sp, #116	; 0x74
 8003c98:	9002      	str	r0, [sp, #8]
 8003c9a:	9006      	str	r0, [sp, #24]
 8003c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ca0:	4809      	ldr	r0, [pc, #36]	; (8003cc8 <siprintf+0x38>)
 8003ca2:	9107      	str	r1, [sp, #28]
 8003ca4:	9104      	str	r1, [sp, #16]
 8003ca6:	4909      	ldr	r1, [pc, #36]	; (8003ccc <siprintf+0x3c>)
 8003ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cac:	9105      	str	r1, [sp, #20]
 8003cae:	6800      	ldr	r0, [r0, #0]
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	a902      	add	r1, sp, #8
 8003cb4:	f000 f868 	bl	8003d88 <_svfiprintf_r>
 8003cb8:	9b02      	ldr	r3, [sp, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	b01c      	add	sp, #112	; 0x70
 8003cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc4:	b003      	add	sp, #12
 8003cc6:	4770      	bx	lr
 8003cc8:	20000028 	.word	0x20000028
 8003ccc:	ffff0208 	.word	0xffff0208

08003cd0 <__ssputs_r>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	688e      	ldr	r6, [r1, #8]
 8003cd6:	429e      	cmp	r6, r3
 8003cd8:	4682      	mov	sl, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4690      	mov	r8, r2
 8003cde:	461f      	mov	r7, r3
 8003ce0:	d838      	bhi.n	8003d54 <__ssputs_r+0x84>
 8003ce2:	898a      	ldrh	r2, [r1, #12]
 8003ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ce8:	d032      	beq.n	8003d50 <__ssputs_r+0x80>
 8003cea:	6825      	ldr	r5, [r4, #0]
 8003cec:	6909      	ldr	r1, [r1, #16]
 8003cee:	eba5 0901 	sub.w	r9, r5, r1
 8003cf2:	6965      	ldr	r5, [r4, #20]
 8003cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	444b      	add	r3, r9
 8003d00:	106d      	asrs	r5, r5, #1
 8003d02:	429d      	cmp	r5, r3
 8003d04:	bf38      	it	cc
 8003d06:	461d      	movcc	r5, r3
 8003d08:	0553      	lsls	r3, r2, #21
 8003d0a:	d531      	bpl.n	8003d70 <__ssputs_r+0xa0>
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f000 fb63 	bl	80043d8 <_malloc_r>
 8003d12:	4606      	mov	r6, r0
 8003d14:	b950      	cbnz	r0, 8003d2c <__ssputs_r+0x5c>
 8003d16:	230c      	movs	r3, #12
 8003d18:	f8ca 3000 	str.w	r3, [sl]
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	6921      	ldr	r1, [r4, #16]
 8003d2e:	464a      	mov	r2, r9
 8003d30:	f000 fabe 	bl	80042b0 <memcpy>
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	6126      	str	r6, [r4, #16]
 8003d42:	6165      	str	r5, [r4, #20]
 8003d44:	444e      	add	r6, r9
 8003d46:	eba5 0509 	sub.w	r5, r5, r9
 8003d4a:	6026      	str	r6, [r4, #0]
 8003d4c:	60a5      	str	r5, [r4, #8]
 8003d4e:	463e      	mov	r6, r7
 8003d50:	42be      	cmp	r6, r7
 8003d52:	d900      	bls.n	8003d56 <__ssputs_r+0x86>
 8003d54:	463e      	mov	r6, r7
 8003d56:	6820      	ldr	r0, [r4, #0]
 8003d58:	4632      	mov	r2, r6
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	f000 fab6 	bl	80042cc <memmove>
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	1b9b      	subs	r3, r3, r6
 8003d64:	60a3      	str	r3, [r4, #8]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	4433      	add	r3, r6
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e7db      	b.n	8003d28 <__ssputs_r+0x58>
 8003d70:	462a      	mov	r2, r5
 8003d72:	f000 fba5 	bl	80044c0 <_realloc_r>
 8003d76:	4606      	mov	r6, r0
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d1e1      	bne.n	8003d40 <__ssputs_r+0x70>
 8003d7c:	6921      	ldr	r1, [r4, #16]
 8003d7e:	4650      	mov	r0, sl
 8003d80:	f000 fabe 	bl	8004300 <_free_r>
 8003d84:	e7c7      	b.n	8003d16 <__ssputs_r+0x46>
	...

08003d88 <_svfiprintf_r>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	4698      	mov	r8, r3
 8003d8e:	898b      	ldrh	r3, [r1, #12]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	b09d      	sub	sp, #116	; 0x74
 8003d94:	4607      	mov	r7, r0
 8003d96:	460d      	mov	r5, r1
 8003d98:	4614      	mov	r4, r2
 8003d9a:	d50e      	bpl.n	8003dba <_svfiprintf_r+0x32>
 8003d9c:	690b      	ldr	r3, [r1, #16]
 8003d9e:	b963      	cbnz	r3, 8003dba <_svfiprintf_r+0x32>
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	f000 fb19 	bl	80043d8 <_malloc_r>
 8003da6:	6028      	str	r0, [r5, #0]
 8003da8:	6128      	str	r0, [r5, #16]
 8003daa:	b920      	cbnz	r0, 8003db6 <_svfiprintf_r+0x2e>
 8003dac:	230c      	movs	r3, #12
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	e0d1      	b.n	8003f5a <_svfiprintf_r+0x1d2>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	616b      	str	r3, [r5, #20]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc8:	2330      	movs	r3, #48	; 0x30
 8003dca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f74 <_svfiprintf_r+0x1ec>
 8003dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dd2:	f04f 0901 	mov.w	r9, #1
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	469a      	mov	sl, r3
 8003dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dde:	b10a      	cbz	r2, 8003de4 <_svfiprintf_r+0x5c>
 8003de0:	2a25      	cmp	r2, #37	; 0x25
 8003de2:	d1f9      	bne.n	8003dd8 <_svfiprintf_r+0x50>
 8003de4:	ebba 0b04 	subs.w	fp, sl, r4
 8003de8:	d00b      	beq.n	8003e02 <_svfiprintf_r+0x7a>
 8003dea:	465b      	mov	r3, fp
 8003dec:	4622      	mov	r2, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	4638      	mov	r0, r7
 8003df2:	f7ff ff6d 	bl	8003cd0 <__ssputs_r>
 8003df6:	3001      	adds	r0, #1
 8003df8:	f000 80aa 	beq.w	8003f50 <_svfiprintf_r+0x1c8>
 8003dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dfe:	445a      	add	r2, fp
 8003e00:	9209      	str	r2, [sp, #36]	; 0x24
 8003e02:	f89a 3000 	ldrb.w	r3, [sl]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80a2 	beq.w	8003f50 <_svfiprintf_r+0x1c8>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e16:	f10a 0a01 	add.w	sl, sl, #1
 8003e1a:	9304      	str	r3, [sp, #16]
 8003e1c:	9307      	str	r3, [sp, #28]
 8003e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e22:	931a      	str	r3, [sp, #104]	; 0x68
 8003e24:	4654      	mov	r4, sl
 8003e26:	2205      	movs	r2, #5
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	4851      	ldr	r0, [pc, #324]	; (8003f74 <_svfiprintf_r+0x1ec>)
 8003e2e:	f7fc f9df 	bl	80001f0 <memchr>
 8003e32:	9a04      	ldr	r2, [sp, #16]
 8003e34:	b9d8      	cbnz	r0, 8003e6e <_svfiprintf_r+0xe6>
 8003e36:	06d0      	lsls	r0, r2, #27
 8003e38:	bf44      	itt	mi
 8003e3a:	2320      	movmi	r3, #32
 8003e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e40:	0711      	lsls	r1, r2, #28
 8003e42:	bf44      	itt	mi
 8003e44:	232b      	movmi	r3, #43	; 0x2b
 8003e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e50:	d015      	beq.n	8003e7e <_svfiprintf_r+0xf6>
 8003e52:	9a07      	ldr	r2, [sp, #28]
 8003e54:	4654      	mov	r4, sl
 8003e56:	2000      	movs	r0, #0
 8003e58:	f04f 0c0a 	mov.w	ip, #10
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e62:	3b30      	subs	r3, #48	; 0x30
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d94e      	bls.n	8003f06 <_svfiprintf_r+0x17e>
 8003e68:	b1b0      	cbz	r0, 8003e98 <_svfiprintf_r+0x110>
 8003e6a:	9207      	str	r2, [sp, #28]
 8003e6c:	e014      	b.n	8003e98 <_svfiprintf_r+0x110>
 8003e6e:	eba0 0308 	sub.w	r3, r0, r8
 8003e72:	fa09 f303 	lsl.w	r3, r9, r3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	46a2      	mov	sl, r4
 8003e7c:	e7d2      	b.n	8003e24 <_svfiprintf_r+0x9c>
 8003e7e:	9b03      	ldr	r3, [sp, #12]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9103      	str	r1, [sp, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfbb      	ittet	lt
 8003e8a:	425b      	neglt	r3, r3
 8003e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e90:	9307      	strge	r3, [sp, #28]
 8003e92:	9307      	strlt	r3, [sp, #28]
 8003e94:	bfb8      	it	lt
 8003e96:	9204      	strlt	r2, [sp, #16]
 8003e98:	7823      	ldrb	r3, [r4, #0]
 8003e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e9c:	d10c      	bne.n	8003eb8 <_svfiprintf_r+0x130>
 8003e9e:	7863      	ldrb	r3, [r4, #1]
 8003ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea2:	d135      	bne.n	8003f10 <_svfiprintf_r+0x188>
 8003ea4:	9b03      	ldr	r3, [sp, #12]
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	9203      	str	r2, [sp, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bfb8      	it	lt
 8003eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb4:	3402      	adds	r4, #2
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f84 <_svfiprintf_r+0x1fc>
 8003ebc:	7821      	ldrb	r1, [r4, #0]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4650      	mov	r0, sl
 8003ec2:	f7fc f995 	bl	80001f0 <memchr>
 8003ec6:	b140      	cbz	r0, 8003eda <_svfiprintf_r+0x152>
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	eba0 000a 	sub.w	r0, r0, sl
 8003ece:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	4303      	orrs	r3, r0
 8003ed6:	3401      	adds	r4, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	4826      	ldr	r0, [pc, #152]	; (8003f78 <_svfiprintf_r+0x1f0>)
 8003ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee4:	2206      	movs	r2, #6
 8003ee6:	f7fc f983 	bl	80001f0 <memchr>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d038      	beq.n	8003f60 <_svfiprintf_r+0x1d8>
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <_svfiprintf_r+0x1f4>)
 8003ef0:	bb1b      	cbnz	r3, 8003f3a <_svfiprintf_r+0x1b2>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	3308      	adds	r3, #8
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	4433      	add	r3, r6
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	e767      	b.n	8003dd6 <_svfiprintf_r+0x4e>
 8003f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e7a5      	b.n	8003e5c <_svfiprintf_r+0xd4>
 8003f10:	2300      	movs	r3, #0
 8003f12:	3401      	adds	r4, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 0c0a 	mov.w	ip, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f22:	3a30      	subs	r2, #48	; 0x30
 8003f24:	2a09      	cmp	r2, #9
 8003f26:	d903      	bls.n	8003f30 <_svfiprintf_r+0x1a8>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0c5      	beq.n	8003eb8 <_svfiprintf_r+0x130>
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	e7c3      	b.n	8003eb8 <_svfiprintf_r+0x130>
 8003f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f34:	4604      	mov	r4, r0
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7f0      	b.n	8003f1c <_svfiprintf_r+0x194>
 8003f3a:	ab03      	add	r3, sp, #12
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	462a      	mov	r2, r5
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <_svfiprintf_r+0x1f8>)
 8003f42:	a904      	add	r1, sp, #16
 8003f44:	4638      	mov	r0, r7
 8003f46:	f3af 8000 	nop.w
 8003f4a:	1c42      	adds	r2, r0, #1
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	d1d6      	bne.n	8003efe <_svfiprintf_r+0x176>
 8003f50:	89ab      	ldrh	r3, [r5, #12]
 8003f52:	065b      	lsls	r3, r3, #25
 8003f54:	f53f af2c 	bmi.w	8003db0 <_svfiprintf_r+0x28>
 8003f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5a:	b01d      	add	sp, #116	; 0x74
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	ab03      	add	r3, sp, #12
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	462a      	mov	r2, r5
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <_svfiprintf_r+0x1f8>)
 8003f68:	a904      	add	r1, sp, #16
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f000 f87a 	bl	8004064 <_printf_i>
 8003f70:	e7eb      	b.n	8003f4a <_svfiprintf_r+0x1c2>
 8003f72:	bf00      	nop
 8003f74:	080045d4 	.word	0x080045d4
 8003f78:	080045de 	.word	0x080045de
 8003f7c:	00000000 	.word	0x00000000
 8003f80:	08003cd1 	.word	0x08003cd1
 8003f84:	080045da 	.word	0x080045da

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	4699      	mov	r9, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bfb8      	it	lt
 8003f9c:	4613      	movlt	r3, r2
 8003f9e:	6033      	str	r3, [r6, #0]
 8003fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	b10a      	cbz	r2, 8003fae <_printf_common+0x26>
 8003faa:	3301      	adds	r3, #1
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	0699      	lsls	r1, r3, #26
 8003fb2:	bf42      	ittt	mi
 8003fb4:	6833      	ldrmi	r3, [r6, #0]
 8003fb6:	3302      	addmi	r3, #2
 8003fb8:	6033      	strmi	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	f015 0506 	ands.w	r5, r5, #6
 8003fc0:	d106      	bne.n	8003fd0 <_printf_common+0x48>
 8003fc2:	f104 0a19 	add.w	sl, r4, #25
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dc26      	bgt.n	800401e <_printf_common+0x96>
 8003fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd4:	1e13      	subs	r3, r2, #0
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	bf18      	it	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d42b      	bmi.n	8004038 <_printf_common+0xb0>
 8003fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c0      	blx	r8
 8003fea:	3001      	adds	r0, #1
 8003fec:	d01e      	beq.n	800402c <_printf_common+0xa4>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	68e5      	ldr	r5, [r4, #12]
 8003ff2:	6832      	ldr	r2, [r6, #0]
 8003ff4:	f003 0306 	and.w	r3, r3, #6
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	bf08      	it	eq
 8003ffc:	1aad      	subeq	r5, r5, r2
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	bf0c      	ite	eq
 8004004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004008:	2500      	movne	r5, #0
 800400a:	4293      	cmp	r3, r2
 800400c:	bfc4      	itt	gt
 800400e:	1a9b      	subgt	r3, r3, r2
 8004010:	18ed      	addgt	r5, r5, r3
 8004012:	2600      	movs	r6, #0
 8004014:	341a      	adds	r4, #26
 8004016:	42b5      	cmp	r5, r6
 8004018:	d11a      	bne.n	8004050 <_printf_common+0xc8>
 800401a:	2000      	movs	r0, #0
 800401c:	e008      	b.n	8004030 <_printf_common+0xa8>
 800401e:	2301      	movs	r3, #1
 8004020:	4652      	mov	r2, sl
 8004022:	4649      	mov	r1, r9
 8004024:	4638      	mov	r0, r7
 8004026:	47c0      	blx	r8
 8004028:	3001      	adds	r0, #1
 800402a:	d103      	bne.n	8004034 <_printf_common+0xac>
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004034:	3501      	adds	r5, #1
 8004036:	e7c6      	b.n	8003fc6 <_printf_common+0x3e>
 8004038:	18e1      	adds	r1, r4, r3
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	2030      	movs	r0, #48	; 0x30
 800403e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004042:	4422      	add	r2, r4
 8004044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800404c:	3302      	adds	r3, #2
 800404e:	e7c7      	b.n	8003fe0 <_printf_common+0x58>
 8004050:	2301      	movs	r3, #1
 8004052:	4622      	mov	r2, r4
 8004054:	4649      	mov	r1, r9
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d0e6      	beq.n	800402c <_printf_common+0xa4>
 800405e:	3601      	adds	r6, #1
 8004060:	e7d9      	b.n	8004016 <_printf_common+0x8e>
	...

08004064 <_printf_i>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	7e0f      	ldrb	r7, [r1, #24]
 800406a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800406c:	2f78      	cmp	r7, #120	; 0x78
 800406e:	4691      	mov	r9, r2
 8004070:	4680      	mov	r8, r0
 8004072:	460c      	mov	r4, r1
 8004074:	469a      	mov	sl, r3
 8004076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800407a:	d807      	bhi.n	800408c <_printf_i+0x28>
 800407c:	2f62      	cmp	r7, #98	; 0x62
 800407e:	d80a      	bhi.n	8004096 <_printf_i+0x32>
 8004080:	2f00      	cmp	r7, #0
 8004082:	f000 80d8 	beq.w	8004236 <_printf_i+0x1d2>
 8004086:	2f58      	cmp	r7, #88	; 0x58
 8004088:	f000 80a3 	beq.w	80041d2 <_printf_i+0x16e>
 800408c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004094:	e03a      	b.n	800410c <_printf_i+0xa8>
 8004096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800409a:	2b15      	cmp	r3, #21
 800409c:	d8f6      	bhi.n	800408c <_printf_i+0x28>
 800409e:	a101      	add	r1, pc, #4	; (adr r1, 80040a4 <_printf_i+0x40>)
 80040a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	08004111 	.word	0x08004111
 80040ac:	0800408d 	.word	0x0800408d
 80040b0:	0800408d 	.word	0x0800408d
 80040b4:	0800408d 	.word	0x0800408d
 80040b8:	0800408d 	.word	0x0800408d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800408d 	.word	0x0800408d
 80040c4:	0800408d 	.word	0x0800408d
 80040c8:	0800408d 	.word	0x0800408d
 80040cc:	0800408d 	.word	0x0800408d
 80040d0:	0800421d 	.word	0x0800421d
 80040d4:	08004141 	.word	0x08004141
 80040d8:	080041ff 	.word	0x080041ff
 80040dc:	0800408d 	.word	0x0800408d
 80040e0:	0800408d 	.word	0x0800408d
 80040e4:	0800423f 	.word	0x0800423f
 80040e8:	0800408d 	.word	0x0800408d
 80040ec:	08004141 	.word	0x08004141
 80040f0:	0800408d 	.word	0x0800408d
 80040f4:	0800408d 	.word	0x0800408d
 80040f8:	08004207 	.word	0x08004207
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	602a      	str	r2, [r5, #0]
 8004104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800410c:	2301      	movs	r3, #1
 800410e:	e0a3      	b.n	8004258 <_printf_i+0x1f4>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	6829      	ldr	r1, [r5, #0]
 8004114:	0606      	lsls	r6, r0, #24
 8004116:	f101 0304 	add.w	r3, r1, #4
 800411a:	d50a      	bpl.n	8004132 <_printf_i+0xce>
 800411c:	680e      	ldr	r6, [r1, #0]
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	2e00      	cmp	r6, #0
 8004122:	da03      	bge.n	800412c <_printf_i+0xc8>
 8004124:	232d      	movs	r3, #45	; 0x2d
 8004126:	4276      	negs	r6, r6
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412c:	485e      	ldr	r0, [pc, #376]	; (80042a8 <_printf_i+0x244>)
 800412e:	230a      	movs	r3, #10
 8004130:	e019      	b.n	8004166 <_printf_i+0x102>
 8004132:	680e      	ldr	r6, [r1, #0]
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800413a:	bf18      	it	ne
 800413c:	b236      	sxthne	r6, r6
 800413e:	e7ef      	b.n	8004120 <_printf_i+0xbc>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	6820      	ldr	r0, [r4, #0]
 8004144:	1d19      	adds	r1, r3, #4
 8004146:	6029      	str	r1, [r5, #0]
 8004148:	0601      	lsls	r1, r0, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0xec>
 800414c:	681e      	ldr	r6, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0xf2>
 8004150:	0646      	lsls	r6, r0, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0xe8>
 8004154:	881e      	ldrh	r6, [r3, #0]
 8004156:	4854      	ldr	r0, [pc, #336]	; (80042a8 <_printf_i+0x244>)
 8004158:	2f6f      	cmp	r7, #111	; 0x6f
 800415a:	bf0c      	ite	eq
 800415c:	2308      	moveq	r3, #8
 800415e:	230a      	movne	r3, #10
 8004160:	2100      	movs	r1, #0
 8004162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004166:	6865      	ldr	r5, [r4, #4]
 8004168:	60a5      	str	r5, [r4, #8]
 800416a:	2d00      	cmp	r5, #0
 800416c:	bfa2      	ittt	ge
 800416e:	6821      	ldrge	r1, [r4, #0]
 8004170:	f021 0104 	bicge.w	r1, r1, #4
 8004174:	6021      	strge	r1, [r4, #0]
 8004176:	b90e      	cbnz	r6, 800417c <_printf_i+0x118>
 8004178:	2d00      	cmp	r5, #0
 800417a:	d04d      	beq.n	8004218 <_printf_i+0x1b4>
 800417c:	4615      	mov	r5, r2
 800417e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004182:	fb03 6711 	mls	r7, r3, r1, r6
 8004186:	5dc7      	ldrb	r7, [r0, r7]
 8004188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800418c:	4637      	mov	r7, r6
 800418e:	42bb      	cmp	r3, r7
 8004190:	460e      	mov	r6, r1
 8004192:	d9f4      	bls.n	800417e <_printf_i+0x11a>
 8004194:	2b08      	cmp	r3, #8
 8004196:	d10b      	bne.n	80041b0 <_printf_i+0x14c>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	07de      	lsls	r6, r3, #31
 800419c:	d508      	bpl.n	80041b0 <_printf_i+0x14c>
 800419e:	6923      	ldr	r3, [r4, #16]
 80041a0:	6861      	ldr	r1, [r4, #4]
 80041a2:	4299      	cmp	r1, r3
 80041a4:	bfde      	ittt	le
 80041a6:	2330      	movle	r3, #48	; 0x30
 80041a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041b0:	1b52      	subs	r2, r2, r5
 80041b2:	6122      	str	r2, [r4, #16]
 80041b4:	f8cd a000 	str.w	sl, [sp]
 80041b8:	464b      	mov	r3, r9
 80041ba:	aa03      	add	r2, sp, #12
 80041bc:	4621      	mov	r1, r4
 80041be:	4640      	mov	r0, r8
 80041c0:	f7ff fee2 	bl	8003f88 <_printf_common>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d14c      	bne.n	8004262 <_printf_i+0x1fe>
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	b004      	add	sp, #16
 80041ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d2:	4835      	ldr	r0, [pc, #212]	; (80042a8 <_printf_i+0x244>)
 80041d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041d8:	6829      	ldr	r1, [r5, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80041e0:	6029      	str	r1, [r5, #0]
 80041e2:	061d      	lsls	r5, r3, #24
 80041e4:	d514      	bpl.n	8004210 <_printf_i+0x1ac>
 80041e6:	07df      	lsls	r7, r3, #31
 80041e8:	bf44      	itt	mi
 80041ea:	f043 0320 	orrmi.w	r3, r3, #32
 80041ee:	6023      	strmi	r3, [r4, #0]
 80041f0:	b91e      	cbnz	r6, 80041fa <_printf_i+0x196>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	f023 0320 	bic.w	r3, r3, #32
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	2310      	movs	r3, #16
 80041fc:	e7b0      	b.n	8004160 <_printf_i+0xfc>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f043 0320 	orr.w	r3, r3, #32
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	2378      	movs	r3, #120	; 0x78
 8004208:	4828      	ldr	r0, [pc, #160]	; (80042ac <_printf_i+0x248>)
 800420a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800420e:	e7e3      	b.n	80041d8 <_printf_i+0x174>
 8004210:	0659      	lsls	r1, r3, #25
 8004212:	bf48      	it	mi
 8004214:	b2b6      	uxthmi	r6, r6
 8004216:	e7e6      	b.n	80041e6 <_printf_i+0x182>
 8004218:	4615      	mov	r5, r2
 800421a:	e7bb      	b.n	8004194 <_printf_i+0x130>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	6826      	ldr	r6, [r4, #0]
 8004220:	6961      	ldr	r1, [r4, #20]
 8004222:	1d18      	adds	r0, r3, #4
 8004224:	6028      	str	r0, [r5, #0]
 8004226:	0635      	lsls	r5, r6, #24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	d501      	bpl.n	8004230 <_printf_i+0x1cc>
 800422c:	6019      	str	r1, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0x1d2>
 8004230:	0670      	lsls	r0, r6, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0x1c8>
 8004234:	8019      	strh	r1, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	4615      	mov	r5, r2
 800423c:	e7ba      	b.n	80041b4 <_printf_i+0x150>
 800423e:	682b      	ldr	r3, [r5, #0]
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	602a      	str	r2, [r5, #0]
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	2100      	movs	r1, #0
 800424a:	4628      	mov	r0, r5
 800424c:	f7fb ffd0 	bl	80001f0 <memchr>
 8004250:	b108      	cbz	r0, 8004256 <_printf_i+0x1f2>
 8004252:	1b40      	subs	r0, r0, r5
 8004254:	6060      	str	r0, [r4, #4]
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	2300      	movs	r3, #0
 800425c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004260:	e7a8      	b.n	80041b4 <_printf_i+0x150>
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	462a      	mov	r2, r5
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	47d0      	blx	sl
 800426c:	3001      	adds	r0, #1
 800426e:	d0ab      	beq.n	80041c8 <_printf_i+0x164>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	079b      	lsls	r3, r3, #30
 8004274:	d413      	bmi.n	800429e <_printf_i+0x23a>
 8004276:	68e0      	ldr	r0, [r4, #12]
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	4298      	cmp	r0, r3
 800427c:	bfb8      	it	lt
 800427e:	4618      	movlt	r0, r3
 8004280:	e7a4      	b.n	80041cc <_printf_i+0x168>
 8004282:	2301      	movs	r3, #1
 8004284:	4632      	mov	r2, r6
 8004286:	4649      	mov	r1, r9
 8004288:	4640      	mov	r0, r8
 800428a:	47d0      	blx	sl
 800428c:	3001      	adds	r0, #1
 800428e:	d09b      	beq.n	80041c8 <_printf_i+0x164>
 8004290:	3501      	adds	r5, #1
 8004292:	68e3      	ldr	r3, [r4, #12]
 8004294:	9903      	ldr	r1, [sp, #12]
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	42ab      	cmp	r3, r5
 800429a:	dcf2      	bgt.n	8004282 <_printf_i+0x21e>
 800429c:	e7eb      	b.n	8004276 <_printf_i+0x212>
 800429e:	2500      	movs	r5, #0
 80042a0:	f104 0619 	add.w	r6, r4, #25
 80042a4:	e7f5      	b.n	8004292 <_printf_i+0x22e>
 80042a6:	bf00      	nop
 80042a8:	080045e5 	.word	0x080045e5
 80042ac:	080045f6 	.word	0x080045f6

080042b0 <memcpy>:
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b8:	d100      	bne.n	80042bc <memcpy+0xc>
 80042ba:	4770      	bx	lr
 80042bc:	b510      	push	{r4, lr}
 80042be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d1f9      	bne.n	80042be <memcpy+0xe>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <memmove>:
 80042cc:	4288      	cmp	r0, r1
 80042ce:	b510      	push	{r4, lr}
 80042d0:	eb01 0402 	add.w	r4, r1, r2
 80042d4:	d902      	bls.n	80042dc <memmove+0x10>
 80042d6:	4284      	cmp	r4, r0
 80042d8:	4623      	mov	r3, r4
 80042da:	d807      	bhi.n	80042ec <memmove+0x20>
 80042dc:	1e43      	subs	r3, r0, #1
 80042de:	42a1      	cmp	r1, r4
 80042e0:	d008      	beq.n	80042f4 <memmove+0x28>
 80042e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ea:	e7f8      	b.n	80042de <memmove+0x12>
 80042ec:	4402      	add	r2, r0
 80042ee:	4601      	mov	r1, r0
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d100      	bne.n	80042f6 <memmove+0x2a>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042fe:	e7f7      	b.n	80042f0 <memmove+0x24>

08004300 <_free_r>:
 8004300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004302:	2900      	cmp	r1, #0
 8004304:	d044      	beq.n	8004390 <_free_r+0x90>
 8004306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430a:	9001      	str	r0, [sp, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f1a1 0404 	sub.w	r4, r1, #4
 8004312:	bfb8      	it	lt
 8004314:	18e4      	addlt	r4, r4, r3
 8004316:	f000 f913 	bl	8004540 <__malloc_lock>
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <_free_r+0x94>)
 800431c:	9801      	ldr	r0, [sp, #4]
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	b933      	cbnz	r3, 8004330 <_free_r+0x30>
 8004322:	6063      	str	r3, [r4, #4]
 8004324:	6014      	str	r4, [r2, #0]
 8004326:	b003      	add	sp, #12
 8004328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800432c:	f000 b90e 	b.w	800454c <__malloc_unlock>
 8004330:	42a3      	cmp	r3, r4
 8004332:	d908      	bls.n	8004346 <_free_r+0x46>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1961      	adds	r1, r4, r5
 8004338:	428b      	cmp	r3, r1
 800433a:	bf01      	itttt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	1949      	addeq	r1, r1, r5
 8004342:	6021      	streq	r1, [r4, #0]
 8004344:	e7ed      	b.n	8004322 <_free_r+0x22>
 8004346:	461a      	mov	r2, r3
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b10b      	cbz	r3, 8004350 <_free_r+0x50>
 800434c:	42a3      	cmp	r3, r4
 800434e:	d9fa      	bls.n	8004346 <_free_r+0x46>
 8004350:	6811      	ldr	r1, [r2, #0]
 8004352:	1855      	adds	r5, r2, r1
 8004354:	42a5      	cmp	r5, r4
 8004356:	d10b      	bne.n	8004370 <_free_r+0x70>
 8004358:	6824      	ldr	r4, [r4, #0]
 800435a:	4421      	add	r1, r4
 800435c:	1854      	adds	r4, r2, r1
 800435e:	42a3      	cmp	r3, r4
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	d1e0      	bne.n	8004326 <_free_r+0x26>
 8004364:	681c      	ldr	r4, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	4421      	add	r1, r4
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	e7da      	b.n	8004326 <_free_r+0x26>
 8004370:	d902      	bls.n	8004378 <_free_r+0x78>
 8004372:	230c      	movs	r3, #12
 8004374:	6003      	str	r3, [r0, #0]
 8004376:	e7d6      	b.n	8004326 <_free_r+0x26>
 8004378:	6825      	ldr	r5, [r4, #0]
 800437a:	1961      	adds	r1, r4, r5
 800437c:	428b      	cmp	r3, r1
 800437e:	bf04      	itt	eq
 8004380:	6819      	ldreq	r1, [r3, #0]
 8004382:	685b      	ldreq	r3, [r3, #4]
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	bf04      	itt	eq
 8004388:	1949      	addeq	r1, r1, r5
 800438a:	6021      	streq	r1, [r4, #0]
 800438c:	6054      	str	r4, [r2, #4]
 800438e:	e7ca      	b.n	8004326 <_free_r+0x26>
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
 8004394:	20000144 	.word	0x20000144

08004398 <sbrk_aligned>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4e0e      	ldr	r6, [pc, #56]	; (80043d4 <sbrk_aligned+0x3c>)
 800439c:	460c      	mov	r4, r1
 800439e:	6831      	ldr	r1, [r6, #0]
 80043a0:	4605      	mov	r5, r0
 80043a2:	b911      	cbnz	r1, 80043aa <sbrk_aligned+0x12>
 80043a4:	f000 f8bc 	bl	8004520 <_sbrk_r>
 80043a8:	6030      	str	r0, [r6, #0]
 80043aa:	4621      	mov	r1, r4
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 f8b7 	bl	8004520 <_sbrk_r>
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	d00a      	beq.n	80043cc <sbrk_aligned+0x34>
 80043b6:	1cc4      	adds	r4, r0, #3
 80043b8:	f024 0403 	bic.w	r4, r4, #3
 80043bc:	42a0      	cmp	r0, r4
 80043be:	d007      	beq.n	80043d0 <sbrk_aligned+0x38>
 80043c0:	1a21      	subs	r1, r4, r0
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 f8ac 	bl	8004520 <_sbrk_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d101      	bne.n	80043d0 <sbrk_aligned+0x38>
 80043cc:	f04f 34ff 	mov.w	r4, #4294967295
 80043d0:	4620      	mov	r0, r4
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	20000148 	.word	0x20000148

080043d8 <_malloc_r>:
 80043d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043dc:	1ccd      	adds	r5, r1, #3
 80043de:	f025 0503 	bic.w	r5, r5, #3
 80043e2:	3508      	adds	r5, #8
 80043e4:	2d0c      	cmp	r5, #12
 80043e6:	bf38      	it	cc
 80043e8:	250c      	movcc	r5, #12
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	4607      	mov	r7, r0
 80043ee:	db01      	blt.n	80043f4 <_malloc_r+0x1c>
 80043f0:	42a9      	cmp	r1, r5
 80043f2:	d905      	bls.n	8004400 <_malloc_r+0x28>
 80043f4:	230c      	movs	r3, #12
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	2600      	movs	r6, #0
 80043fa:	4630      	mov	r0, r6
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	4e2e      	ldr	r6, [pc, #184]	; (80044bc <_malloc_r+0xe4>)
 8004402:	f000 f89d 	bl	8004540 <__malloc_lock>
 8004406:	6833      	ldr	r3, [r6, #0]
 8004408:	461c      	mov	r4, r3
 800440a:	bb34      	cbnz	r4, 800445a <_malloc_r+0x82>
 800440c:	4629      	mov	r1, r5
 800440e:	4638      	mov	r0, r7
 8004410:	f7ff ffc2 	bl	8004398 <sbrk_aligned>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	4604      	mov	r4, r0
 8004418:	d14d      	bne.n	80044b6 <_malloc_r+0xde>
 800441a:	6834      	ldr	r4, [r6, #0]
 800441c:	4626      	mov	r6, r4
 800441e:	2e00      	cmp	r6, #0
 8004420:	d140      	bne.n	80044a4 <_malloc_r+0xcc>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	4631      	mov	r1, r6
 8004426:	4638      	mov	r0, r7
 8004428:	eb04 0803 	add.w	r8, r4, r3
 800442c:	f000 f878 	bl	8004520 <_sbrk_r>
 8004430:	4580      	cmp	r8, r0
 8004432:	d13a      	bne.n	80044aa <_malloc_r+0xd2>
 8004434:	6821      	ldr	r1, [r4, #0]
 8004436:	3503      	adds	r5, #3
 8004438:	1a6d      	subs	r5, r5, r1
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	4629      	mov	r1, r5
 8004448:	4638      	mov	r0, r7
 800444a:	f7ff ffa5 	bl	8004398 <sbrk_aligned>
 800444e:	3001      	adds	r0, #1
 8004450:	d02b      	beq.n	80044aa <_malloc_r+0xd2>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	442b      	add	r3, r5
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	e00e      	b.n	8004478 <_malloc_r+0xa0>
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	1b52      	subs	r2, r2, r5
 800445e:	d41e      	bmi.n	800449e <_malloc_r+0xc6>
 8004460:	2a0b      	cmp	r2, #11
 8004462:	d916      	bls.n	8004492 <_malloc_r+0xba>
 8004464:	1961      	adds	r1, r4, r5
 8004466:	42a3      	cmp	r3, r4
 8004468:	6025      	str	r5, [r4, #0]
 800446a:	bf18      	it	ne
 800446c:	6059      	strne	r1, [r3, #4]
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	bf08      	it	eq
 8004472:	6031      	streq	r1, [r6, #0]
 8004474:	5162      	str	r2, [r4, r5]
 8004476:	604b      	str	r3, [r1, #4]
 8004478:	4638      	mov	r0, r7
 800447a:	f104 060b 	add.w	r6, r4, #11
 800447e:	f000 f865 	bl	800454c <__malloc_unlock>
 8004482:	f026 0607 	bic.w	r6, r6, #7
 8004486:	1d23      	adds	r3, r4, #4
 8004488:	1af2      	subs	r2, r6, r3
 800448a:	d0b6      	beq.n	80043fa <_malloc_r+0x22>
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	50a3      	str	r3, [r4, r2]
 8004490:	e7b3      	b.n	80043fa <_malloc_r+0x22>
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	42a3      	cmp	r3, r4
 8004496:	bf0c      	ite	eq
 8004498:	6032      	streq	r2, [r6, #0]
 800449a:	605a      	strne	r2, [r3, #4]
 800449c:	e7ec      	b.n	8004478 <_malloc_r+0xa0>
 800449e:	4623      	mov	r3, r4
 80044a0:	6864      	ldr	r4, [r4, #4]
 80044a2:	e7b2      	b.n	800440a <_malloc_r+0x32>
 80044a4:	4634      	mov	r4, r6
 80044a6:	6876      	ldr	r6, [r6, #4]
 80044a8:	e7b9      	b.n	800441e <_malloc_r+0x46>
 80044aa:	230c      	movs	r3, #12
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4638      	mov	r0, r7
 80044b0:	f000 f84c 	bl	800454c <__malloc_unlock>
 80044b4:	e7a1      	b.n	80043fa <_malloc_r+0x22>
 80044b6:	6025      	str	r5, [r4, #0]
 80044b8:	e7de      	b.n	8004478 <_malloc_r+0xa0>
 80044ba:	bf00      	nop
 80044bc:	20000144 	.word	0x20000144

080044c0 <_realloc_r>:
 80044c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c4:	4680      	mov	r8, r0
 80044c6:	4614      	mov	r4, r2
 80044c8:	460e      	mov	r6, r1
 80044ca:	b921      	cbnz	r1, 80044d6 <_realloc_r+0x16>
 80044cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	4611      	mov	r1, r2
 80044d2:	f7ff bf81 	b.w	80043d8 <_malloc_r>
 80044d6:	b92a      	cbnz	r2, 80044e4 <_realloc_r+0x24>
 80044d8:	f7ff ff12 	bl	8004300 <_free_r>
 80044dc:	4625      	mov	r5, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e4:	f000 f838 	bl	8004558 <_malloc_usable_size_r>
 80044e8:	4284      	cmp	r4, r0
 80044ea:	4607      	mov	r7, r0
 80044ec:	d802      	bhi.n	80044f4 <_realloc_r+0x34>
 80044ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044f2:	d812      	bhi.n	800451a <_realloc_r+0x5a>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4640      	mov	r0, r8
 80044f8:	f7ff ff6e 	bl	80043d8 <_malloc_r>
 80044fc:	4605      	mov	r5, r0
 80044fe:	2800      	cmp	r0, #0
 8004500:	d0ed      	beq.n	80044de <_realloc_r+0x1e>
 8004502:	42bc      	cmp	r4, r7
 8004504:	4622      	mov	r2, r4
 8004506:	4631      	mov	r1, r6
 8004508:	bf28      	it	cs
 800450a:	463a      	movcs	r2, r7
 800450c:	f7ff fed0 	bl	80042b0 <memcpy>
 8004510:	4631      	mov	r1, r6
 8004512:	4640      	mov	r0, r8
 8004514:	f7ff fef4 	bl	8004300 <_free_r>
 8004518:	e7e1      	b.n	80044de <_realloc_r+0x1e>
 800451a:	4635      	mov	r5, r6
 800451c:	e7df      	b.n	80044de <_realloc_r+0x1e>
	...

08004520 <_sbrk_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d06      	ldr	r5, [pc, #24]	; (800453c <_sbrk_r+0x1c>)
 8004524:	2300      	movs	r3, #0
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7ff f8ea 	bl	8003704 <_sbrk>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_sbrk_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_sbrk_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	2000014c 	.word	0x2000014c

08004540 <__malloc_lock>:
 8004540:	4801      	ldr	r0, [pc, #4]	; (8004548 <__malloc_lock+0x8>)
 8004542:	f000 b811 	b.w	8004568 <__retarget_lock_acquire_recursive>
 8004546:	bf00      	nop
 8004548:	20000150 	.word	0x20000150

0800454c <__malloc_unlock>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__malloc_unlock+0x8>)
 800454e:	f000 b80c 	b.w	800456a <__retarget_lock_release_recursive>
 8004552:	bf00      	nop
 8004554:	20000150 	.word	0x20000150

08004558 <_malloc_usable_size_r>:
 8004558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455c:	1f18      	subs	r0, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfbc      	itt	lt
 8004562:	580b      	ldrlt	r3, [r1, r0]
 8004564:	18c0      	addlt	r0, r0, r3
 8004566:	4770      	bx	lr

08004568 <__retarget_lock_acquire_recursive>:
 8004568:	4770      	bx	lr

0800456a <__retarget_lock_release_recursive>:
 800456a:	4770      	bx	lr

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
