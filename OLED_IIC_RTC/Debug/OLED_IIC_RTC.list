
OLED_IIC_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000000a8  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a791  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e89  00000000  00000000  0002a84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000938  00000000  00000000  0002d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218fe  00000000  00000000  0002da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db81  00000000  00000000  0004f346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8ff8  00000000  00000000  0005cec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125ebf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c8c  00000000  00000000  00125f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e10 	.word	0x08003e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08003e10 	.word	0x08003e10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_Init+0x40>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_Init+0x40>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x40>)
 800058a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x40>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f94f 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f808 	bl	80005b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f002 feba 	bl	8003320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x54>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_InitTick+0x58>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f967 	bl	80008aa <HAL_SYSTICK_Config>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e00e      	b.n	8000604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d80a      	bhi.n	8000602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
 80005f4:	f000 f92f 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <HAL_InitTick+0x5c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	e000      	b.n	8000604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000024 	.word	0x20000024
 8000610:	20000004 	.word	0x20000004
 8000614:	20000000 	.word	0x20000000

08000618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x20>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_IncTick+0x24>)
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004
 800063c:	200000a8 	.word	0x200000a8

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000a8 	.word	0x200000a8

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff ffee 	bl	8000640 <HAL_GetTick>
 8000664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_Delay+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067e:	bf00      	nop
 8000680:	f7ff ffde 	bl	8000640 <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000004 	.word	0x20000004

080006a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <__NVIC_SetPriorityGrouping+0x44>)
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__NVIC_GetPriorityGrouping+0x18>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	f003 0307 	and.w	r3, r3, #7
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0b      	blt.n	800072e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <__NVIC_EnableIRQ+0x38>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff29 	bl	80006a0 <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff3e 	bl	80006e8 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff31 	bl	8000704 <__NVIC_EnableIRQ>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ffa2 	bl	80007fc <SysTick_Config>
 80008b8:	4603      	mov	r3, r0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	e16b      	b.n	8000bb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008e0:	2201      	movs	r2, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	f040 815a 	bne.w	8000bb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	2b01      	cmp	r3, #1
 8000908:	d005      	beq.n	8000916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000912:	2b02      	cmp	r3, #2
 8000914:	d130      	bne.n	8000978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	f003 0201 	and.w	r2, r3, #1
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	2b03      	cmp	r3, #3
 8000982:	d017      	beq.n	80009b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d123      	bne.n	8000a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	08da      	lsrs	r2, r3, #3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3208      	adds	r2, #8
 80009c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	691a      	ldr	r2, [r3, #16]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	08da      	lsrs	r2, r3, #3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3208      	adds	r2, #8
 8000a02:	69b9      	ldr	r1, [r7, #24]
 8000a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0203 	and.w	r2, r3, #3
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f000 80b4 	beq.w	8000bb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <HAL_GPIO_Init+0x30c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a5f      	ldr	r2, [pc, #380]	; (8000bd0 <HAL_GPIO_Init+0x30c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <HAL_GPIO_Init+0x30c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a66:	4a5b      	ldr	r2, [pc, #364]	; (8000bd4 <HAL_GPIO_Init+0x310>)
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4013      	ands	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d02b      	beq.n	8000aea <HAL_GPIO_Init+0x226>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d025      	beq.n	8000ae6 <HAL_GPIO_Init+0x222>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d01f      	beq.n	8000ae2 <HAL_GPIO_Init+0x21e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x320>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d019      	beq.n	8000ade <HAL_GPIO_Init+0x21a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <HAL_GPIO_Init+0x324>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0x216>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4d      	ldr	r2, [pc, #308]	; (8000bec <HAL_GPIO_Init+0x328>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d00d      	beq.n	8000ad6 <HAL_GPIO_Init+0x212>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4c      	ldr	r2, [pc, #304]	; (8000bf0 <HAL_GPIO_Init+0x32c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x20e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <HAL_GPIO_Init+0x330>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_GPIO_Init+0x20a>
 8000aca:	2307      	movs	r3, #7
 8000acc:	e00e      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ace:	2308      	movs	r3, #8
 8000ad0:	e00c      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	e00a      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e008      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ada:	2304      	movs	r3, #4
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e004      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x228>
 8000aea:	2300      	movs	r3, #0
 8000aec:	69fa      	ldr	r2, [r7, #28]
 8000aee:	f002 0203 	and.w	r2, r2, #3
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	4093      	lsls	r3, r2
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000afc:	4935      	ldr	r1, [pc, #212]	; (8000bd4 <HAL_GPIO_Init+0x310>)
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b2e:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_GPIO_Init+0x334>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	f67f ae90 	bls.w	80008e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020c00 	.word	0x40020c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40021400 	.word	0x40021400
 8000bf0:	40021800 	.word	0x40021800
 8000bf4:	40021c00 	.word	0x40021c00
 8000bf8:	40013c00 	.word	0x40013c00

08000bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e12b      	b.n	8000e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d106      	bne.n	8000c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f002 f946 	bl	8002eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0201 	bic.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c60:	f001 f898 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8000c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4a81      	ldr	r2, [pc, #516]	; (8000e70 <HAL_I2C_Init+0x274>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d807      	bhi.n	8000c80 <HAL_I2C_Init+0x84>
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4a80      	ldr	r2, [pc, #512]	; (8000e74 <HAL_I2C_Init+0x278>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	bf94      	ite	ls
 8000c78:	2301      	movls	r3, #1
 8000c7a:	2300      	movhi	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	e006      	b.n	8000c8e <HAL_I2C_Init+0x92>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4a7d      	ldr	r2, [pc, #500]	; (8000e78 <HAL_I2C_Init+0x27c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	bf94      	ite	ls
 8000c88:	2301      	movls	r3, #1
 8000c8a:	2300      	movhi	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e0e7      	b.n	8000e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4a78      	ldr	r2, [pc, #480]	; (8000e7c <HAL_I2C_Init+0x280>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a6a      	ldr	r2, [pc, #424]	; (8000e70 <HAL_I2C_Init+0x274>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d802      	bhi.n	8000cd0 <HAL_I2C_Init+0xd4>
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	e009      	b.n	8000ce4 <HAL_I2C_Init+0xe8>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	4a69      	ldr	r2, [pc, #420]	; (8000e80 <HAL_I2C_Init+0x284>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	099b      	lsrs	r3, r3, #6
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	495c      	ldr	r1, [pc, #368]	; (8000e70 <HAL_I2C_Init+0x274>)
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d819      	bhi.n	8000d38 <HAL_I2C_Init+0x13c>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1e59      	subs	r1, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d12:	1c59      	adds	r1, r3, #1
 8000d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d18:	400b      	ands	r3, r1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00a      	beq.n	8000d34 <HAL_I2C_Init+0x138>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	1e59      	subs	r1, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d32:	e051      	b.n	8000dd8 <HAL_I2C_Init+0x1dc>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e04f      	b.n	8000dd8 <HAL_I2C_Init+0x1dc>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d111      	bne.n	8000d64 <HAL_I2C_Init+0x168>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	1e58      	subs	r0, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6859      	ldr	r1, [r3, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	440b      	add	r3, r1
 8000d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	e012      	b.n	8000d8a <HAL_I2C_Init+0x18e>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	1e58      	subs	r0, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6859      	ldr	r1, [r3, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	0099      	lsls	r1, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf0c      	ite	eq
 8000d84:	2301      	moveq	r3, #1
 8000d86:	2300      	movne	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_I2C_Init+0x196>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e022      	b.n	8000dd8 <HAL_I2C_Init+0x1dc>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10e      	bne.n	8000db8 <HAL_I2C_Init+0x1bc>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1e58      	subs	r0, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6859      	ldr	r1, [r3, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db6:	e00f      	b.n	8000dd8 <HAL_I2C_Init+0x1dc>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1e58      	subs	r0, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6859      	ldr	r1, [r3, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	0099      	lsls	r1, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	6809      	ldr	r1, [r1, #0]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69da      	ldr	r2, [r3, #28]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6911      	ldr	r1, [r2, #16]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68d2      	ldr	r2, [r2, #12]
 8000e12:	4311      	orrs	r1, r2
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2220      	movs	r2, #32
 8000e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	000186a0 	.word	0x000186a0
 8000e74:	001e847f 	.word	0x001e847f
 8000e78:	003d08ff 	.word	0x003d08ff
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	10624dd3 	.word	0x10624dd3

08000e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	817b      	strh	r3, [r7, #10]
 8000e96:	460b      	mov	r3, r1
 8000e98:	813b      	strh	r3, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e9e:	f7ff fbcf 	bl	8000640 <HAL_GetTick>
 8000ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b20      	cmp	r3, #32
 8000eae:	f040 80d9 	bne.w	8001064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2319      	movs	r3, #25
 8000eb8:	2201      	movs	r2, #1
 8000eba:	496d      	ldr	r1, [pc, #436]	; (8001070 <HAL_I2C_Mem_Write+0x1ec>)
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 f971 	bl	80011a4 <I2C_WaitOnFlagUntilTimeout>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e0cc      	b.n	8001066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_I2C_Mem_Write+0x56>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e0c5      	b.n	8001066 <HAL_I2C_Mem_Write+0x1e2>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d007      	beq.n	8000f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2221      	movs	r2, #33	; 0x21
 8000f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2240      	movs	r2, #64	; 0x40
 8000f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6a3a      	ldr	r2, [r7, #32]
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <HAL_I2C_Mem_Write+0x1f0>)
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f42:	88f8      	ldrh	r0, [r7, #6]
 8000f44:	893a      	ldrh	r2, [r7, #8]
 8000f46:	8979      	ldrh	r1, [r7, #10]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4603      	mov	r3, r0
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f890 	bl	8001078 <I2C_RequestMemoryWrite>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d052      	beq.n	8001004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e081      	b.n	8001066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f9f2 	bl	8001350 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00d      	beq.n	8000f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d107      	bne.n	8000f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e06b      	b.n	8001066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d11b      	bne.n	8001004 <HAL_I2C_Mem_Write+0x180>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d017      	beq.n	8001004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1aa      	bne.n	8000f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f9de 	bl	80013d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	2b04      	cmp	r3, #4
 8001022:	d107      	bne.n	8001034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e016      	b.n	8001066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2220      	movs	r2, #32
 800104c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001064:	2302      	movs	r3, #2
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	00100002 	.word	0x00100002
 8001074:	ffff0000 	.word	0xffff0000

08001078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	4608      	mov	r0, r1
 8001082:	4611      	mov	r1, r2
 8001084:	461a      	mov	r2, r3
 8001086:	4603      	mov	r3, r0
 8001088:	817b      	strh	r3, [r7, #10]
 800108a:	460b      	mov	r3, r1
 800108c:	813b      	strh	r3, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f878 	bl	80011a4 <I2C_WaitOnFlagUntilTimeout>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00d      	beq.n	80010d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c8:	d103      	bne.n	80010d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e05f      	b.n	8001196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010d6:	897b      	ldrh	r3, [r7, #10]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80010e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	6a3a      	ldr	r2, [r7, #32]
 80010ea:	492d      	ldr	r1, [pc, #180]	; (80011a0 <I2C_RequestMemoryWrite+0x128>)
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f8b0 	bl	8001252 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e04c      	b.n	8001196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	6a39      	ldr	r1, [r7, #32]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f91a 	bl	8001350 <I2C_WaitOnTXEFlagUntilTimeout>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00d      	beq.n	800113e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	2b04      	cmp	r3, #4
 8001128:	d107      	bne.n	800113a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e02b      	b.n	8001196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001144:	893b      	ldrh	r3, [r7, #8]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	e021      	b.n	8001194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001150:	893b      	ldrh	r3, [r7, #8]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800115e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001160:	6a39      	ldr	r1, [r7, #32]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f8f4 	bl	8001350 <I2C_WaitOnTXEFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b04      	cmp	r3, #4
 8001174:	d107      	bne.n	8001186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e005      	b.n	8001196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800118a:	893b      	ldrh	r3, [r7, #8]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	00010002 	.word	0x00010002

080011a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011b4:	e025      	b.n	8001202 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d021      	beq.n	8001202 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011be:	f7ff fa3f 	bl	8000640 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d302      	bcc.n	80011d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d116      	bne.n	8001202 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2220      	movs	r2, #32
 80011de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f043 0220 	orr.w	r2, r3, #32
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e023      	b.n	800124a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10d      	bne.n	8001228 <I2C_WaitOnFlagUntilTimeout+0x84>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4013      	ands	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	e00c      	b.n	8001242 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4013      	ands	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	429a      	cmp	r2, r3
 8001246:	d0b6      	beq.n	80011b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001260:	e051      	b.n	8001306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001270:	d123      	bne.n	80012ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001280:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800128a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2220      	movs	r2, #32
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e046      	b.n	8001348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d021      	beq.n	8001306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c2:	f7ff f9bd 	bl	8000640 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d116      	bne.n	8001306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f043 0220 	orr.w	r2, r3, #32
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e020      	b.n	8001348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10c      	bne.n	800132a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4013      	ands	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf14      	ite	ne
 8001322:	2301      	movne	r3, #1
 8001324:	2300      	moveq	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	e00b      	b.n	8001342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	43da      	mvns	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4013      	ands	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d18d      	bne.n	8001262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800135c:	e02d      	b.n	80013ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 f878 	bl	8001454 <I2C_IsAcknowledgeFailed>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e02d      	b.n	80013ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d021      	beq.n	80013ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001376:	f7ff f963 	bl	8000640 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	429a      	cmp	r2, r3
 8001384:	d302      	bcc.n	800138c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d116      	bne.n	80013ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2220      	movs	r2, #32
 8001396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f043 0220 	orr.w	r2, r3, #32
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e007      	b.n	80013ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c4:	2b80      	cmp	r3, #128	; 0x80
 80013c6:	d1ca      	bne.n	800135e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013de:	e02d      	b.n	800143c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f837 	bl	8001454 <I2C_IsAcknowledgeFailed>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e02d      	b.n	800144c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f6:	d021      	beq.n	800143c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013f8:	f7ff f922 	bl	8000640 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	d302      	bcc.n	800140e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2220      	movs	r2, #32
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f043 0220 	orr.w	r2, r3, #32
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e007      	b.n	800144c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b04      	cmp	r3, #4
 8001448:	d1ca      	bne.n	80013e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146a:	d11b      	bne.n	80014a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f043 0204 	orr.w	r2, r3, #4
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e267      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e242      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a65      	ldr	r2, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff f868 	bl	8000640 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff f864 	bl	8000640 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e207      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff f854 	bl	8000640 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff f850 	bl	8000640 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f3      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff f809 	bl	8000640 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff f805 	bl	8000640 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a8      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4925      	ldr	r1, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7fe ffe8 	bl	8000640 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7fe ffe4 	bl	8000640 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e187      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7fe ffc8 	bl	8000640 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7fe ffc4 	bl	8000640 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e167      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7fe ffb1 	bl	8000640 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7fe ffad 	bl	8000640 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d907      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e150      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470000 	.word	0x42470000
 80016fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ea      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b77      	ldr	r3, [pc, #476]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b74      	ldr	r3, [pc, #464]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7fe ff6d 	bl	8000640 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7fe ff69 	bl	8000640 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e10c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x2ea>
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x30c>
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7fe ff2e 	bl	8000640 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7fe ff2a 	bl	8000640 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x334>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7fe ff18 	bl	8000640 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7fe ff14 	bl	8000640 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0b5      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a1 	beq.w	8001994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d05c      	beq.n	8001918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d141      	bne.n	80018ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7fe fee8 	bl	8000640 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7fe fee4 	bl	8000640 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7fe febd 	bl	8000640 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7fe feb9 	bl	8000640 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e05c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x416>
 80018e8:	e054      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe fea6 	bl	8000640 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe fea2 	bl	8000640 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e038      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7fe fdd4 	bl	8000640 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7fe fdd0 	bl	8000640 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd34 	bl	80005b8 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08004670 	.word	0x08004670
 8001b68:	20000024 	.word	0x20000024
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b094      	sub	sp, #80	; 0x50
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80e1 	bhi.w	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e0db      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba8:	e0db      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bae:	e0d8      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 0100 	mov.w	r1, #0
 8001bee:	0159      	lsls	r1, r3, #5
 8001bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf4:	0150      	lsls	r0, r2, #5
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	1a51      	subs	r1, r2, r1
 8001bfe:	6139      	str	r1, [r7, #16]
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb63 0301 	sbc.w	r3, r3, r1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c14:	4659      	mov	r1, fp
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4651      	mov	r1, sl
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4651      	mov	r1, sl
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4651      	mov	r1, sl
 8001c24:	ebb2 0801 	subs.w	r8, r2, r1
 8001c28:	4659      	mov	r1, fp
 8001c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	eb18 0303 	adds.w	r3, r8, r3
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	eb49 0303 	adc.w	r3, r9, r3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c62:	4629      	mov	r1, r5
 8001c64:	024b      	lsls	r3, r1, #9
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	024a      	lsls	r2, r1, #9
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c80:	f7fe faf6 	bl	8000270 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	4611      	mov	r1, r2
 8001c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0159      	lsls	r1, r3, #5
 8001cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cba:	0150      	lsls	r0, r2, #5
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	18e3      	adds	r3, r4, r3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	464b      	mov	r3, r9
 8001d04:	eb45 0303 	adc.w	r3, r5, r3
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d20:	4621      	mov	r1, r4
 8001d22:	028a      	lsls	r2, r1, #10
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	61fa      	str	r2, [r7, #28]
 8001d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d34:	f7fe fa9c 	bl	8000270 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3750      	adds	r7, #80	; 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000024 	.word	0x20000024

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08004680 	.word	0x08004680

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d035      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001de4:	4b62      	ldr	r3, [pc, #392]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dea:	f7fe fc29 	bl	8000640 <HAL_GetTick>
 8001dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001df2:	f7fe fc25 	bl	8000640 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b0      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e04:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	019a      	lsls	r2, r3, #6
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	071b      	lsls	r3, r3, #28
 8001e1c:	4955      	ldr	r1, [pc, #340]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e24:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e2a:	f7fe fc09 	bl	8000640 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e32:	f7fe fc05 	bl	8000640 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e090      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e44:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8083 	beq.w	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a43      	ldr	r2, [pc, #268]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e86:	f7fe fbdb 	bl	8000640 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e8e:	f7fe fbd7 	bl	8000640 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e062      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02f      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d028      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eda:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d114      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fba5 	bl	8000640 <HAL_GetTick>
 8001ef6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fba1 	bl	8000640 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e02a      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ee      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f28:	d10d      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3e:	490d      	ldr	r1, [pc, #52]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
 8001f44:	e005      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f50:	6093      	str	r3, [r2, #8]
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5e:	4905      	ldr	r1, [pc, #20]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	42470068 	.word	0x42470068
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42470e40 	.word	0x42470e40

08001f80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e066      	b.n	8002064 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7f5b      	ldrb	r3, [r3, #29]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f001 f906 	bl	80031b8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	22ca      	movs	r2, #202	; 0xca
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2253      	movs	r2, #83	; 0x53
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fbd8 	bl	8002778 <RTC_EnterInitMode>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12c      	bne.n	800202c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fe4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68d2      	ldr	r2, [r2, #12]
 800200c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6919      	ldr	r1, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fbdf 	bl	80027e6 <RTC_ExitInitMode>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	22ff      	movs	r2, #255	; 0xff
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	7f1b      	ldrb	r3, [r3, #28]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_RTC_SetTime+0x1c>
 8002084:	2302      	movs	r3, #2
 8002086:	e087      	b.n	8002198 <HAL_RTC_SetTime+0x12c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2202      	movs	r2, #2
 8002092:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d126      	bne.n	80020e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fbbc 	bl	8002830 <RTC_ByteToBcd2>
 80020b8:	4603      	mov	r3, r0
 80020ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fbb5 	bl	8002830 <RTC_ByteToBcd2>
 80020c6:	4603      	mov	r3, r0
 80020c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80020ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	789b      	ldrb	r3, [r3, #2]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fbad 	bl	8002830 <RTC_ByteToBcd2>
 80020d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80020d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	78db      	ldrb	r3, [r3, #3]
 80020e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e018      	b.n	800211a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2200      	movs	r2, #0
 80020fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002108:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800210e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22ca      	movs	r2, #202	; 0xca
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2253      	movs	r2, #83	; 0x53
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fb24 	bl	8002778 <RTC_EnterInitMode>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d120      	bne.n	800217c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002144:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002148:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002158:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	431a      	orrs	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fb37 	bl	80027e6 <RTC_ExitInitMode>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	771a      	strb	r2, [r3, #28]

  return status;
 8002196:	7cfb      	ldrb	r3, [r7, #19]
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80021d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	0d9b      	lsrs	r3, r3, #22
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11a      	bne.n	8002252 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fb22 	bl	800286a <RTC_Bcd2ToByte>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb19 	bl	800286a <RTC_Bcd2ToByte>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	789b      	ldrb	r3, [r3, #2]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fb10 	bl	800286a <RTC_Bcd2ToByte>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	7f1b      	ldrb	r3, [r3, #28]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_RTC_SetDate+0x1c>
 8002274:	2302      	movs	r3, #2
 8002276:	e071      	b.n	800235c <HAL_RTC_SetDate+0x100>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2202      	movs	r2, #2
 8002282:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10e      	bne.n	80022a8 <HAL_RTC_SetDate+0x4c>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	f023 0310 	bic.w	r3, r3, #16
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	330a      	adds	r3, #10
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11c      	bne.n	80022e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fabc 	bl	8002830 <RTC_ByteToBcd2>
 80022b8:	4603      	mov	r3, r0
 80022ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fab5 	bl	8002830 <RTC_ByteToBcd2>
 80022c6:	4603      	mov	r3, r0
 80022c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	789b      	ldrb	r3, [r3, #2]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 faad 	bl	8002830 <RTC_ByteToBcd2>
 80022d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e00e      	b.n	8002306 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	78db      	ldrb	r3, [r3, #3]
 80022ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80022f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80022fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	22ca      	movs	r2, #202	; 0xca
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2253      	movs	r2, #83	; 0x53
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fa2e 	bl	8002778 <RTC_EnterInitMode>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002334:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fa55 	bl	80027e6 <RTC_ExitInitMode>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	22ff      	movs	r2, #255	; 0xff
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	771a      	strb	r2, [r3, #28]

  return status;
 800235a:	7cfb      	ldrb	r3, [r7, #19]
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800237e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002382:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11a      	bne.n	80023f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	78db      	ldrb	r3, [r3, #3]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fa4f 	bl	800286a <RTC_Bcd2ToByte>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fa46 	bl	800286a <RTC_Bcd2ToByte>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	789b      	ldrb	r3, [r3, #2]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fa3d 	bl	800286a <RTC_Bcd2ToByte>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002410:	4b9a      	ldr	r3, [pc, #616]	; (800267c <HAL_RTC_SetAlarm_IT+0x278>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a9a      	ldr	r2, [pc, #616]	; (8002680 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_RTC_SetAlarm_IT+0x36>
 8002436:	2302      	movs	r3, #2
 8002438:	e11c      	b.n	8002674 <HAL_RTC_SetAlarm_IT+0x270>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2202      	movs	r2, #2
 8002444:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d137      	bne.n	80024bc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f9e3 	bl	8002830 <RTC_ByteToBcd2>
 800246a:	4603      	mov	r3, r0
 800246c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f9dc 	bl	8002830 <RTC_ByteToBcd2>
 8002478:	4603      	mov	r3, r0
 800247a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800247c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	789b      	ldrb	r3, [r3, #2]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f9d4 	bl	8002830 <RTC_ByteToBcd2>
 8002488:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800248a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002494:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f9c6 	bl	8002830 <RTC_ByteToBcd2>
 80024a4:	4603      	mov	r3, r0
 80024a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80024a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80024b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e023      	b.n	8002504 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80024dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80024e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	78db      	ldrb	r3, [r3, #3]
 80024e8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80024ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80024f4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80024fa:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002500:	4313      	orrs	r3, r2
 8002502:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	22ca      	movs	r2, #202	; 0xca
 8002516:	625a      	str	r2, [r3, #36]	; 0x24
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2253      	movs	r2, #83	; 0x53
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002528:	d141      	bne.n	80025ae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002538:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800254a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1e5a      	subs	r2, r3, #1
 8002550:	617a      	str	r2, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2203      	movs	r2, #3
 8002562:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e082      	b.n	8002674 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0e7      	beq.n	800254c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	e04b      	b.n	8002646 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025bc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80025ce:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RTC_SetAlarm_IT+0x278>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <HAL_RTC_SetAlarm_IT+0x27c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	617a      	str	r2, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2203      	movs	r2, #3
 80025fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e035      	b.n	8002674 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0e7      	beq.n	80025e6 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002644:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_RTC_SetAlarm_IT+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_RTC_SetAlarm_IT+0x280>)
 800264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002650:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_RTC_SetAlarm_IT+0x280>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <HAL_RTC_SetAlarm_IT+0x280>)
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3724      	adds	r7, #36	; 0x24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	20000024 	.word	0x20000024
 8002680:	10624dd3 	.word	0x10624dd3
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f831 	bl	8002714 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80026c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f9c3 	bl	8002a6c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80026f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RTC_AlarmIRQHandler+0x88>)
 80026fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fe:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	775a      	strb	r2, [r3, #29]
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002742:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7fd ff7c 	bl	8000640 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800274a:	e009      	b.n	8002760 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800274c:	f7fd ff78 	bl	8000640 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275a:	d901      	bls.n	8002760 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e007      	b.n	8002770 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ee      	beq.n	800274c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d122      	bne.n	80027dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027a6:	f7fd ff4b 	bl	8000640 <HAL_GetTick>
 80027aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027ac:	e00c      	b.n	80027c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ae:	f7fd ff47 	bl	8000640 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027bc:	d904      	bls.n	80027c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2204      	movs	r2, #4
 80027c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <RTC_EnterInitMode+0x64>
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d1e8      	bne.n	80027ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002800:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff89 	bl	8002728 <HAL_RTC_WaitForSynchro>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2204      	movs	r2, #4
 8002820:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800283e:	e005      	b.n	800284c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	3301      	adds	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	3b0a      	subs	r3, #10
 800284a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2b09      	cmp	r3, #9
 8002850:	d8f6      	bhi.n	8002840 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	b2da      	uxtb	r2, r3
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4313      	orrs	r3, r2
 800285c:	b2db      	uxtb	r3, r3
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	b2da      	uxtb	r2, r3
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	4413      	add	r3, r2
 8002894:	b2db      	uxtb	r3, r3
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a59      	ldr	r2, [pc, #356]	; (8002a1c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0adb      	lsrs	r3, r3, #11
 80028bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	7f1b      	ldrb	r3, [r3, #28]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e09b      	b.n	8002a0a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	22ca      	movs	r2, #202	; 0xca
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2253      	movs	r2, #83	; 0x53
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	617a      	str	r2, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2203      	movs	r2, #3
 8002912:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e075      	b.n	8002a0a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e7      	bne.n	80028fc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800294c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	0adb      	lsrs	r3, r3, #11
 800295a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	617a      	str	r2, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2203      	movs	r2, #3
 800297a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e041      	b.n	8002a0a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0e7      	beq.n	8002964 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0207 	bic.w	r2, r2, #7
 80029a2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80029c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029c6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80029ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d2:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000024 	.word	0x20000024
 8002a1c:	10624dd3 	.word	0x10624dd3
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fbf6 	bl	800322c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a50:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002a54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a58:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	775a      	strb	r2, [r3, #29]
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <WriteCmd>:
					
0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,
					
0xD8, 0x30, 0x8D, 0x14, 0xAF};
void WriteCmd()
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<27; i++){
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	e011      	b.n	8002ab4 <WriteCmd+0x34>
		HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,CMD_Data+i,1,0x100);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <WriteCmd+0x44>)
 8002a94:	4413      	add	r3, r2
 8002a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9a:	9202      	str	r2, [sp, #8]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	9201      	str	r2, [sp, #4]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2178      	movs	r1, #120	; 0x78
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <WriteCmd+0x48>)
 8002aaa:	f7fe f9eb 	bl	8000e84 <HAL_I2C_Mem_Write>
	for(i=0; i<27; i++){
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	71fb      	strb	r3, [r7, #7]
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2b1a      	cmp	r3, #26
 8002ab8:	d9ea      	bls.n	8002a90 <WriteCmd+0x10>
	}
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000008 	.word	0x20000008
 8002ac8:	200000ac 	.word	0x200000ac

08002acc <OLED_WR_CMD>:
//向设备写控制命令
void OLED_WR_CMD(uint8_t cmd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af04      	add	r7, sp, #16
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 8002ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	2301      	movs	r3, #1
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2178      	movs	r1, #120	; 0x78
 8002aea:	4803      	ldr	r0, [pc, #12]	; (8002af8 <OLED_WR_CMD+0x2c>)
 8002aec:	f7fe f9ca 	bl	8000e84 <HAL_I2C_Mem_Write>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200000ac 	.word	0x200000ac

08002afc <OLED_WR_DATA>:
//向设备写数据
void OLED_WR_DATA(uint8_t data)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2301      	movs	r3, #1
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	2178      	movs	r1, #120	; 0x78
 8002b1a:	4803      	ldr	r0, [pc, #12]	; (8002b28 <OLED_WR_DATA+0x2c>)
 8002b1c:	f7fe f9b2 	bl	8000e84 <HAL_I2C_Mem_Write>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200000ac 	.word	0x200000ac

08002b2c <OLED_Init>:
//初始化oled屏幕
void OLED_Init(void)
{ 	
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8002b30:	20c8      	movs	r0, #200	; 0xc8
 8002b32:	f7fd fd91 	bl	8000658 <HAL_Delay>
	WriteCmd();
 8002b36:	f7ff ffa3 	bl	8002a80 <WriteCmd>
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <OLED_Clear>:
//清屏size12 size16要清两行，其他函数有类似情况
void OLED_Clear()
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8002b44:	2300      	movs	r3, #0
 8002b46:	71fb      	strb	r3, [r7, #7]
 8002b48:	e01b      	b.n	8002b82 <OLED_Clear+0x44>
	{  
		OLED_WR_CMD(0xb0+i);
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	3b50      	subs	r3, #80	; 0x50
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ffbb 	bl	8002acc <OLED_WR_CMD>
		OLED_WR_CMD (0x00); 
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff ffb8 	bl	8002acc <OLED_WR_CMD>
		OLED_WR_CMD (0x10); 
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f7ff ffb5 	bl	8002acc <OLED_WR_CMD>
		for(n=0;n<128;n++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	71bb      	strb	r3, [r7, #6]
 8002b66:	e005      	b.n	8002b74 <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff ffc7 	bl	8002afc <OLED_WR_DATA>
		for(n=0;n<128;n++)
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	3301      	adds	r3, #1
 8002b72:	71bb      	strb	r3, [r7, #6]
 8002b74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	daf5      	bge.n	8002b68 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)  
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d9e0      	bls.n	8002b4a <OLED_Clear+0xc>
	} 
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <OLED_Set_Pos>:
	OLED_WR_CMD(0X8D);  //SET DCDC命令
	OLED_WR_CMD(0X10);  //DCDC OFF
	OLED_WR_CMD(0XAE);  //DISPLAY OFF
}		   			 
void OLED_Set_Pos(uint8_t x, uint8_t y) 
{ 	
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);
 8002ba2:	79bb      	ldrb	r3, [r7, #6]
 8002ba4:	3b50      	subs	r3, #80	; 0x50
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff8f 	bl	8002acc <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10);
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0310 	orr.w	r3, r3, #16
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff86 	bl	8002acc <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff7f 	bl	8002acc <OLED_WR_CMD>
} 
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <oled_pow>:
		for(n=0;n<128;n++)
			OLED_WR_DATA(1); 
	} //更新显示
}
unsigned int oled_pow(uint8_t m,uint8_t n)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	460a      	mov	r2, r1
 8002be0:	71fb      	strb	r3, [r7, #7]
 8002be2:	4613      	mov	r3, r2
 8002be4:	71bb      	strb	r3, [r7, #6]
	unsigned int result=1;	 
 8002be6:	2301      	movs	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8002bea:	e004      	b.n	8002bf6 <oled_pow+0x20>
 8002bec:	79fa      	ldrb	r2, [r7, #7]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	79bb      	ldrb	r3, [r7, #6]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	71ba      	strb	r2, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f5      	bne.n	8002bec <oled_pow+0x16>
	return result;
 8002c00:	68fb      	ldr	r3, [r7, #12]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示				 
//size:选择字体 16/12 
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4604      	mov	r4, r0
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	4603      	mov	r3, r0
 8002c24:	71bb      	strb	r3, [r7, #6]
 8002c26:	460b      	mov	r3, r1
 8002c28:	717b      	strb	r3, [r7, #5]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73bb      	strb	r3, [r7, #14]
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值			
 8002c36:	797b      	ldrb	r3, [r7, #5]
 8002c38:	3b20      	subs	r3, #32
 8002c3a:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	da04      	bge.n	8002c4e <OLED_ShowChar+0x3e>
 8002c44:	2300      	movs	r3, #0
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	79bb      	ldrb	r3, [r7, #6]
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8002c4e:	793b      	ldrb	r3, [r7, #4]
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d133      	bne.n	8002cbc <OLED_ShowChar+0xac>
			{
			OLED_Set_Pos(x,y);	
 8002c54:	79ba      	ldrb	r2, [r7, #6]
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff99 	bl	8002b92 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e00b      	b.n	8002c7e <OLED_ShowChar+0x6e>
			OLED_WR_DATA(F8x16[c*16+i]);
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	011a      	lsls	r2, r3, #4
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <OLED_ShowChar+0xec>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff42 	bl	8002afc <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d9f0      	bls.n	8002c66 <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff7f 	bl	8002b92 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e00c      	b.n	8002cb4 <OLED_ShowChar+0xa4>
			OLED_WR_DATA(F8x16[c*16+i+8]);
 8002c9a:	7bbb      	ldrb	r3, [r7, #14]
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <OLED_ShowChar+0xec>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff27 	bl	8002afc <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d9ef      	bls.n	8002c9a <OLED_ShowChar+0x8a>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_DATA(F6x8[c][i]);
				
			}
}
 8002cba:	e01b      	b.n	8002cf4 <OLED_ShowChar+0xe4>
				OLED_Set_Pos(x,y);
 8002cbc:	79ba      	ldrb	r2, [r7, #6]
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff65 	bl	8002b92 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e00f      	b.n	8002cee <OLED_ShowChar+0xde>
				OLED_WR_DATA(F6x8[c][i]);
 8002cce:	7bba      	ldrb	r2, [r7, #14]
 8002cd0:	7bf9      	ldrb	r1, [r7, #15]
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <OLED_ShowChar+0xf0>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4403      	add	r3, r0
 8002cde:	440b      	add	r3, r1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff0a 	bl	8002afc <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	3301      	adds	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d9ec      	bls.n	8002cce <OLED_ShowChar+0xbe>
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	08004080 	.word	0x08004080
 8002d00:	08003e58 	.word	0x08003e58

08002d04 <OLED_ShowNum>:
//len :数字的位数
//size:字体大小
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);	 		  
void OLED_ShowNum(uint8_t x,uint8_t y,unsigned int num,uint8_t len,uint8_t size2)
{         	
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	603a      	str	r2, [r7, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	460b      	mov	r3, r1
 8002d14:	71bb      	strb	r3, [r7, #6]
 8002d16:	4613      	mov	r3, r2
 8002d18:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;						   
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e049      	b.n	8002db8 <OLED_ShowNum+0xb4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8002d24:	797a      	ldrb	r2, [r7, #5]
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	200a      	movs	r0, #10
 8002d34:	f7ff ff4f 	bl	8002bd6 <oled_pow>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <OLED_ShowNum+0xc8>)
 8002d42:	fba3 2301 	umull	r2, r3, r3, r1
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	1aca      	subs	r2, r1, r3
 8002d52:	4613      	mov	r3, r2
 8002d54:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8002d56:	7bbb      	ldrb	r3, [r7, #14]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d119      	bne.n	8002d90 <OLED_ShowNum+0x8c>
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	797b      	ldrb	r3, [r7, #5]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	429a      	cmp	r2, r3
 8002d64:	da14      	bge.n	8002d90 <OLED_ShowNum+0x8c>
		{
			if(temp==0)
 8002d66:	7b7b      	ldrb	r3, [r7, #13]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 8002d6c:	7e3b      	ldrb	r3, [r7, #24]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	fb12 f303 	smulbb	r3, r2, r3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b2d8      	uxtb	r0, r3
 8002d80:	7e3b      	ldrb	r3, [r7, #24]
 8002d82:	79b9      	ldrb	r1, [r7, #6]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f7ff ff43 	bl	8002c10 <OLED_ShowChar>
				continue;
 8002d8a:	e012      	b.n	8002db2 <OLED_ShowNum+0xae>
			}else enshow=1; 
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 8002d90:	7e3b      	ldrb	r3, [r7, #24]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	fb12 f303 	smulbb	r3, r2, r3
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	4413      	add	r3, r2
 8002da2:	b2d8      	uxtb	r0, r3
 8002da4:	7b7b      	ldrb	r3, [r7, #13]
 8002da6:	3330      	adds	r3, #48	; 0x30
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	7e3b      	ldrb	r3, [r7, #24]
 8002dac:	79b9      	ldrb	r1, [r7, #6]
 8002dae:	f7ff ff2f 	bl	8002c10 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	3301      	adds	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	797b      	ldrb	r3, [r7, #5]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3b1      	bcc.n	8002d24 <OLED_ShowNum+0x20>
	}
} 
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	cccccccd 	.word	0xcccccccd

08002dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_GPIO_Init+0x84>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]

}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <MX_I2C1_Init+0x54>)
 8002e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <MX_I2C1_Init+0x58>)
 8002e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <MX_I2C1_Init+0x50>)
 8002e96:	f7fd feb1 	bl	8000bfc <HAL_I2C_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ea0:	f000 f8ce 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200000ac 	.word	0x200000ac
 8002eac:	40005400 	.word	0x40005400
 8002eb0:	000186a0 	.word	0x000186a0

08002eb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_I2C_MspInit+0x84>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12c      	bne.n	8002f30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f04:	2304      	movs	r3, #4
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <HAL_I2C_MspInit+0x8c>)
 8002f10:	f7fd fcd8 	bl	80008c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f22:	6413      	str	r3, [r2, #64]	; 0x40
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40005400 	.word	0x40005400
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020400 	.word	0x40020400

08002f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f48:	f7fd fb14 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f4c:	f000 f80c 	bl	8002f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f50:	f7ff ff3e 	bl	8002dd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f54:	f7ff ff80 	bl	8002e58 <MX_I2C1_Init>
  MX_RTC_Init();
 8002f58:	f000 f878 	bl	800304c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();					//初始化OLED
 8002f5c:	f7ff fde6 	bl	8002b2c <OLED_Init>
  	OLED_Clear();
 8002f60:	f7ff fded 	bl	8002b3e <OLED_Clear>
//  	OLED_Clear();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <main+0x20>
	...

08002f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b094      	sub	sp, #80	; 0x50
 8002f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f6e:	f107 0320 	add.w	r3, r7, #32
 8002f72:	2230      	movs	r2, #48	; 0x30
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fad4 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <SystemClock_Config+0xd0>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4a28      	ldr	r2, [pc, #160]	; (8003038 <SystemClock_Config+0xd0>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <SystemClock_Config+0xd0>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <SystemClock_Config+0xd4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <SystemClock_Config+0xd4>)
 8002fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <SystemClock_Config+0xd4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002fc4:	2305      	movs	r3, #5
 8002fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fdc:	2304      	movs	r3, #4
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fe0:	23a8      	movs	r3, #168	; 0xa8
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fe8:	2304      	movs	r3, #4
 8002fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fec:	f107 0320 	add.w	r3, r7, #32
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fa5f 	bl	80014b4 <HAL_RCC_OscConfig>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ffc:	f000 f820 	bl	8003040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003000:	230f      	movs	r3, #15
 8003002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003004:	2302      	movs	r3, #2
 8003006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800300c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003016:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	2105      	movs	r1, #5
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fcc0 	bl	80019a4 <HAL_RCC_ClockConfig>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800302a:	f000 f809 	bl	8003040 <Error_Handler>
  }
}
 800302e:	bf00      	nop
 8003030:	3750      	adds	r7, #80	; 0x50
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000

08003040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003044:	b672      	cpsid	i
}
 8003046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003048:	e7fe      	b.n	8003048 <Error_Handler+0x8>
	...

0800304c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b090      	sub	sp, #64	; 0x40
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003066:	463b      	mov	r3, r7
 8003068:	2228      	movs	r2, #40	; 0x28
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fa59 	bl	8003524 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003072:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <MX_RTC_Init+0x15c>)
 8003074:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <MX_RTC_Init+0x160>)
 8003076:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <MX_RTC_Init+0x15c>)
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <MX_RTC_Init+0x15c>)
 8003080:	227f      	movs	r2, #127	; 0x7f
 8003082:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <MX_RTC_Init+0x15c>)
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <MX_RTC_Init+0x15c>)
 800308c:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8003090:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 8003092:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <MX_RTC_Init+0x15c>)
 8003094:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003098:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800309a:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <MX_RTC_Init+0x15c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030a0:	4841      	ldr	r0, [pc, #260]	; (80031a8 <MX_RTC_Init+0x15c>)
 80030a2:	f7fe ff6d 	bl	8001f80 <HAL_RTC_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 80030ac:	f7ff ffc8 	bl	8003040 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x7;
 80030b0:	2307      	movs	r3, #7
 80030b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x15;
 80030b6:	2315      	movs	r3, #21
 80030b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x10;
 80030bc:	2310      	movs	r3, #16
 80030be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ce:	2201      	movs	r2, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	4835      	ldr	r0, [pc, #212]	; (80031a8 <MX_RTC_Init+0x15c>)
 80030d4:	f7fe ffca 	bl	800206c <HAL_RTC_SetTime>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_RTC_Init+0x96>
  {
    Error_Handler();
 80030de:	f7ff ffaf 	bl	8003040 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80030e2:	2306      	movs	r3, #6
 80030e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 80030e8:	2303      	movs	r3, #3
 80030ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x16;
 80030ee:	2316      	movs	r3, #22
 80030f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x19;
 80030f4:	2319      	movs	r3, #25
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030fe:	2201      	movs	r2, #1
 8003100:	4619      	mov	r1, r3
 8003102:	4829      	ldr	r0, [pc, #164]	; (80031a8 <MX_RTC_Init+0x15c>)
 8003104:	f7ff f8aa 	bl	800225c <HAL_RTC_SetDate>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800310e:	f7ff ff97 	bl	8003040 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x8;
 8003112:	2308      	movs	r3, #8
 8003114:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x16;
 8003116:	2316      	movs	r3, #22
 8003118:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x5;
 800311a:	2305      	movs	r3, #5
 800311c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 800312a:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <MX_RTC_Init+0x164>)
 800312c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x3;
 8003136:	2303      	movs	r3, #3
 8003138:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800313c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003142:	463b      	mov	r3, r7
 8003144:	2201      	movs	r2, #1
 8003146:	4619      	mov	r1, r3
 8003148:	4817      	ldr	r0, [pc, #92]	; (80031a8 <MX_RTC_Init+0x15c>)
 800314a:	f7ff f95b 	bl	8002404 <HAL_RTC_SetAlarm_IT>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8003154:	f7ff ff74 	bl	8003040 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0x10;
 8003158:	2310      	movs	r3, #16
 800315a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x20;
 800315c:	2320      	movs	r3, #32
 800315e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 8003160:	2330      	movs	r3, #48	; 0x30
 8003162:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <MX_RTC_Init+0x168>)
 8003166:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmDateWeekDay = 0x1;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_B;
 800316e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003174:	463b      	mov	r3, r7
 8003176:	2201      	movs	r2, #1
 8003178:	4619      	mov	r1, r3
 800317a:	480b      	ldr	r0, [pc, #44]	; (80031a8 <MX_RTC_Init+0x15c>)
 800317c:	f7ff f942 	bl	8002404 <HAL_RTC_SetAlarm_IT>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8003186:	f7ff ff5b 	bl	8003040 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800318a:	2204      	movs	r2, #4
 800318c:	2100      	movs	r1, #0
 800318e:	4806      	ldr	r0, [pc, #24]	; (80031a8 <MX_RTC_Init+0x15c>)
 8003190:	f7ff fb88 	bl	80028a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_RTC_Init+0x152>
  {
    Error_Handler();
 800319a:	f7ff ff51 	bl	8003040 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	3740      	adds	r7, #64	; 0x40
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000100 	.word	0x20000100
 80031ac:	40002800 	.word	0x40002800
 80031b0:	80800000 	.word	0x80800000
 80031b4:	80808000 	.word	0x80808000

080031b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a14      	ldr	r2, [pc, #80]	; (8003224 <HAL_RTC_MspInit+0x6c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d121      	bne.n	800321c <HAL_RTC_MspInit+0x64>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031d8:	2302      	movs	r3, #2
 80031da:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80031dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e2:	f107 0308 	add.w	r3, r7, #8
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fde8 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80031f2:	f7ff ff25 	bl	8003040 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RTC_MspInit+0x70>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2101      	movs	r1, #1
 8003200:	2003      	movs	r0, #3
 8003202:	f7fd fb28 	bl	8000856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003206:	2003      	movs	r0, #3
 8003208:	f7fd fb41 	bl	800088e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 1);
 800320c:	2201      	movs	r2, #1
 800320e:	2101      	movs	r1, #1
 8003210:	2029      	movs	r0, #41	; 0x29
 8003212:	f7fd fb20 	bl	8000856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003216:	2029      	movs	r0, #41	; 0x29
 8003218:	f7fd fb39 	bl	800088e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40002800 	.word	0x40002800
 8003228:	42470e3c 	.word	0x42470e3c

0800322c <HAL_RTCEx_WakeUpTimerEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b094      	sub	sp, #80	; 0x50
 8003230:	af02      	add	r7, sp, #8
 8003232:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	if (HAL_RTC_GetTime(hrtc, &sTime,  RTC_FORMAT_BIN) == HAL_OK)
 8003234:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003238:	2200      	movs	r2, #0
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fe ffaf 	bl	80021a0 <HAL_RTC_GetTime>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d163      	bne.n	8003310 <HAL_RTCEx_WakeUpTimerEventCallback+0xe4>
	{
		HAL_RTC_GetDate(hrtc, &sDate,  RTC_FORMAT_BIN);
 8003248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800324c:	2200      	movs	r2, #0
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff f887 	bl	8002364 <HAL_RTC_GetDate>
		//		  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
		//		  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
		//uint16_t	yPos=50, xPos=20;
		//显示日期  年-月-日
		char str[40];
		sprintf(str,"RTC Date= %4d-%2d-%2d",2000+sDate.Year,sDate.Month,sDate.Date);
 8003256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800325a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800325e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003262:	4619      	mov	r1, r3
 8003264:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003268:	f107 0008 	add.w	r0, r7, #8
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	460b      	mov	r3, r1
 8003270:	4929      	ldr	r1, [pc, #164]	; (8003318 <HAL_RTCEx_WakeUpTimerEventCallback+0xec>)
 8003272:	f000 f95f 	bl	8003534 <siprintf>
		//LCD_ShowStr(xPos,yPos, (uint8_t*)str);
		OLED_ShowNum(0,0,2000+sDate.Year,5,12);
 8003276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800327a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800327e:	461a      	mov	r2, r3
 8003280:	230c      	movs	r3, #12
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2305      	movs	r3, #5
 8003286:	2100      	movs	r1, #0
 8003288:	2000      	movs	r0, #0
 800328a:	f7ff fd3b 	bl	8002d04 <OLED_ShowNum>
		OLED_ShowNum(0,1,sDate.Month,5,12);
 800328e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003292:	461a      	mov	r2, r3
 8003294:	230c      	movs	r3, #12
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2305      	movs	r3, #5
 800329a:	2101      	movs	r1, #1
 800329c:	2000      	movs	r0, #0
 800329e:	f7ff fd31 	bl	8002d04 <OLED_ShowNum>
		OLED_ShowNum(0,2,sDate.Date,5,12);
 80032a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032a6:	461a      	mov	r2, r3
 80032a8:	230c      	movs	r3, #12
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2305      	movs	r3, #5
 80032ae:	2102      	movs	r1, #2
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7ff fd27 	bl	8002d04 <OLED_ShowNum>
//
//		LCD_ShowUintX0(LCD_CurX, yPos,	sDate.Date, 2);

		//显示 时间  hh:mm:ss
		//yPos=yPos+LCD_SP15;
		sprintf(str,"RTC Time= %2d:%2d:%2d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80032b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80032ba:	461a      	mov	r2, r3
 80032bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032c0:	4619      	mov	r1, r3
 80032c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80032c6:	f107 0008 	add.w	r0, r7, #8
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	460b      	mov	r3, r1
 80032ce:	4913      	ldr	r1, [pc, #76]	; (800331c <HAL_RTCEx_WakeUpTimerEventCallback+0xf0>)
 80032d0:	f000 f930 	bl	8003534 <siprintf>
		//LCD_ShowStr(xPos,yPos, (uint8_t*)str);
		OLED_ShowNum(0,3,sTime.Hours,5,12);
 80032d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80032d8:	461a      	mov	r2, r3
 80032da:	230c      	movs	r3, #12
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2305      	movs	r3, #5
 80032e0:	2103      	movs	r1, #3
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7ff fd0e 	bl	8002d04 <OLED_ShowNum>
		OLED_ShowNum(0,4,sTime.Minutes,5,12);
 80032e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032ec:	461a      	mov	r2, r3
 80032ee:	230c      	movs	r3, #12
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2305      	movs	r3, #5
 80032f4:	2104      	movs	r1, #4
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7ff fd04 	bl	8002d04 <OLED_ShowNum>
		OLED_ShowNum(0,5,sTime.Seconds,5,12);
 80032fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003300:	461a      	mov	r2, r3
 8003302:	230c      	movs	r3, #12
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2305      	movs	r3, #5
 8003308:	2105      	movs	r1, #5
 800330a:	2000      	movs	r0, #0
 800330c:	f7ff fcfa 	bl	8002d04 <OLED_ShowNum>
//		LCD_ShowChar(LCD_CurX, yPos, ':', 0);
//
//		LCD_ShowUintX0(LCD_CurX, yPos, sTime.Seconds,2);
	}

}
 8003310:	bf00      	nop
 8003312:	3748      	adds	r7, #72	; 0x48
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	08003e28 	.word	0x08003e28
 800331c:	08003e40 	.word	0x08003e40

08003320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_MspInit+0x4c>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_MspInit+0x4c>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_MspInit+0x4c>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_MspInit+0x4c>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_MspInit+0x4c>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_MspInit+0x4c>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800335e:	2005      	movs	r0, #5
 8003360:	f7fd fa6e 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800

08003370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <NMI_Handler+0x4>

08003376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337a:	e7fe      	b.n	800337a <HardFault_Handler+0x4>

0800337c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003380:	e7fe      	b.n	8003380 <MemManage_Handler+0x4>

08003382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003386:	e7fe      	b.n	8003386 <BusFault_Handler+0x4>

08003388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	e7fe      	b.n	800338c <UsageFault_Handler+0x4>

0800338e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033bc:	f7fd f92c 	bl	8000618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <RTC_WKUP_IRQHandler+0x10>)
 80033ca:	f7ff fb2b 	bl	8002a24 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000100 	.word	0x20000100

080033d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <RTC_Alarm_IRQHandler+0x10>)
 80033de:	f7ff f953 	bl	8002688 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000100 	.word	0x20000100

080033ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <_sbrk+0x5c>)
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <_sbrk+0x60>)
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <_sbrk+0x64>)
 800340a:	4a12      	ldr	r2, [pc, #72]	; (8003454 <_sbrk+0x68>)
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <_sbrk+0x64>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	429a      	cmp	r2, r3
 800341a:	d207      	bcs.n	800342c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800341c:	f000 f858 	bl	80034d0 <__errno>
 8003420:	4603      	mov	r3, r0
 8003422:	220c      	movs	r2, #12
 8003424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	e009      	b.n	8003440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <_sbrk+0x64>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <_sbrk+0x64>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	4a05      	ldr	r2, [pc, #20]	; (8003450 <_sbrk+0x64>)
 800343c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20020000 	.word	0x20020000
 800344c:	00000400 	.word	0x00000400
 8003450:	20000120 	.word	0x20000120
 8003454:	20000138 	.word	0x20000138

08003458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <SystemInit+0x20>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <SystemInit+0x20>)
 8003464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800347c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003480:	480d      	ldr	r0, [pc, #52]	; (80034b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003482:	490e      	ldr	r1, [pc, #56]	; (80034bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003498:	4c0b      	ldr	r4, [pc, #44]	; (80034c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034a6:	f7ff ffd7 	bl	8003458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034aa:	f000 f817 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ae:	f7ff fd49 	bl	8002f44 <main>
  bx  lr    
 80034b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80034c0:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 80034c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80034c8:	20000134 	.word	0x20000134

080034cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC_IRQHandler>
	...

080034d0 <__errno>:
 80034d0:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <__errno+0x8>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000028 	.word	0x20000028

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4d0d      	ldr	r5, [pc, #52]	; (8003514 <__libc_init_array+0x38>)
 80034e0:	4c0d      	ldr	r4, [pc, #52]	; (8003518 <__libc_init_array+0x3c>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	2600      	movs	r6, #0
 80034e8:	42a6      	cmp	r6, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	4d0b      	ldr	r5, [pc, #44]	; (800351c <__libc_init_array+0x40>)
 80034ee:	4c0c      	ldr	r4, [pc, #48]	; (8003520 <__libc_init_array+0x44>)
 80034f0:	f000 fc8e 	bl	8003e10 <_init>
 80034f4:	1b64      	subs	r4, r4, r5
 80034f6:	10a4      	asrs	r4, r4, #2
 80034f8:	2600      	movs	r6, #0
 80034fa:	42a6      	cmp	r6, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f855 3b04 	ldr.w	r3, [r5], #4
 8003504:	4798      	blx	r3
 8003506:	3601      	adds	r6, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f855 3b04 	ldr.w	r3, [r5], #4
 800350e:	4798      	blx	r3
 8003510:	3601      	adds	r6, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	080046c4 	.word	0x080046c4
 8003518:	080046c4 	.word	0x080046c4
 800351c:	080046c4 	.word	0x080046c4
 8003520:	080046c8 	.word	0x080046c8

08003524 <memset>:
 8003524:	4402      	add	r2, r0
 8003526:	4603      	mov	r3, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	f803 1b01 	strb.w	r1, [r3], #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <siprintf>:
 8003534:	b40e      	push	{r1, r2, r3}
 8003536:	b500      	push	{lr}
 8003538:	b09c      	sub	sp, #112	; 0x70
 800353a:	ab1d      	add	r3, sp, #116	; 0x74
 800353c:	9002      	str	r0, [sp, #8]
 800353e:	9006      	str	r0, [sp, #24]
 8003540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003544:	4809      	ldr	r0, [pc, #36]	; (800356c <siprintf+0x38>)
 8003546:	9107      	str	r1, [sp, #28]
 8003548:	9104      	str	r1, [sp, #16]
 800354a:	4909      	ldr	r1, [pc, #36]	; (8003570 <siprintf+0x3c>)
 800354c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003550:	9105      	str	r1, [sp, #20]
 8003552:	6800      	ldr	r0, [r0, #0]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	a902      	add	r1, sp, #8
 8003558:	f000 f868 	bl	800362c <_svfiprintf_r>
 800355c:	9b02      	ldr	r3, [sp, #8]
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	b01c      	add	sp, #112	; 0x70
 8003564:	f85d eb04 	ldr.w	lr, [sp], #4
 8003568:	b003      	add	sp, #12
 800356a:	4770      	bx	lr
 800356c:	20000028 	.word	0x20000028
 8003570:	ffff0208 	.word	0xffff0208

08003574 <__ssputs_r>:
 8003574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003578:	688e      	ldr	r6, [r1, #8]
 800357a:	429e      	cmp	r6, r3
 800357c:	4682      	mov	sl, r0
 800357e:	460c      	mov	r4, r1
 8003580:	4690      	mov	r8, r2
 8003582:	461f      	mov	r7, r3
 8003584:	d838      	bhi.n	80035f8 <__ssputs_r+0x84>
 8003586:	898a      	ldrh	r2, [r1, #12]
 8003588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800358c:	d032      	beq.n	80035f4 <__ssputs_r+0x80>
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	6909      	ldr	r1, [r1, #16]
 8003592:	eba5 0901 	sub.w	r9, r5, r1
 8003596:	6965      	ldr	r5, [r4, #20]
 8003598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800359c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035a0:	3301      	adds	r3, #1
 80035a2:	444b      	add	r3, r9
 80035a4:	106d      	asrs	r5, r5, #1
 80035a6:	429d      	cmp	r5, r3
 80035a8:	bf38      	it	cc
 80035aa:	461d      	movcc	r5, r3
 80035ac:	0553      	lsls	r3, r2, #21
 80035ae:	d531      	bpl.n	8003614 <__ssputs_r+0xa0>
 80035b0:	4629      	mov	r1, r5
 80035b2:	f000 fb63 	bl	8003c7c <_malloc_r>
 80035b6:	4606      	mov	r6, r0
 80035b8:	b950      	cbnz	r0, 80035d0 <__ssputs_r+0x5c>
 80035ba:	230c      	movs	r3, #12
 80035bc:	f8ca 3000 	str.w	r3, [sl]
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d0:	6921      	ldr	r1, [r4, #16]
 80035d2:	464a      	mov	r2, r9
 80035d4:	f000 fabe 	bl	8003b54 <memcpy>
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	6126      	str	r6, [r4, #16]
 80035e6:	6165      	str	r5, [r4, #20]
 80035e8:	444e      	add	r6, r9
 80035ea:	eba5 0509 	sub.w	r5, r5, r9
 80035ee:	6026      	str	r6, [r4, #0]
 80035f0:	60a5      	str	r5, [r4, #8]
 80035f2:	463e      	mov	r6, r7
 80035f4:	42be      	cmp	r6, r7
 80035f6:	d900      	bls.n	80035fa <__ssputs_r+0x86>
 80035f8:	463e      	mov	r6, r7
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	4632      	mov	r2, r6
 80035fe:	4641      	mov	r1, r8
 8003600:	f000 fab6 	bl	8003b70 <memmove>
 8003604:	68a3      	ldr	r3, [r4, #8]
 8003606:	1b9b      	subs	r3, r3, r6
 8003608:	60a3      	str	r3, [r4, #8]
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	4433      	add	r3, r6
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	2000      	movs	r0, #0
 8003612:	e7db      	b.n	80035cc <__ssputs_r+0x58>
 8003614:	462a      	mov	r2, r5
 8003616:	f000 fba5 	bl	8003d64 <_realloc_r>
 800361a:	4606      	mov	r6, r0
 800361c:	2800      	cmp	r0, #0
 800361e:	d1e1      	bne.n	80035e4 <__ssputs_r+0x70>
 8003620:	6921      	ldr	r1, [r4, #16]
 8003622:	4650      	mov	r0, sl
 8003624:	f000 fabe 	bl	8003ba4 <_free_r>
 8003628:	e7c7      	b.n	80035ba <__ssputs_r+0x46>
	...

0800362c <_svfiprintf_r>:
 800362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003630:	4698      	mov	r8, r3
 8003632:	898b      	ldrh	r3, [r1, #12]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	b09d      	sub	sp, #116	; 0x74
 8003638:	4607      	mov	r7, r0
 800363a:	460d      	mov	r5, r1
 800363c:	4614      	mov	r4, r2
 800363e:	d50e      	bpl.n	800365e <_svfiprintf_r+0x32>
 8003640:	690b      	ldr	r3, [r1, #16]
 8003642:	b963      	cbnz	r3, 800365e <_svfiprintf_r+0x32>
 8003644:	2140      	movs	r1, #64	; 0x40
 8003646:	f000 fb19 	bl	8003c7c <_malloc_r>
 800364a:	6028      	str	r0, [r5, #0]
 800364c:	6128      	str	r0, [r5, #16]
 800364e:	b920      	cbnz	r0, 800365a <_svfiprintf_r+0x2e>
 8003650:	230c      	movs	r3, #12
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	e0d1      	b.n	80037fe <_svfiprintf_r+0x1d2>
 800365a:	2340      	movs	r3, #64	; 0x40
 800365c:	616b      	str	r3, [r5, #20]
 800365e:	2300      	movs	r3, #0
 8003660:	9309      	str	r3, [sp, #36]	; 0x24
 8003662:	2320      	movs	r3, #32
 8003664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003668:	f8cd 800c 	str.w	r8, [sp, #12]
 800366c:	2330      	movs	r3, #48	; 0x30
 800366e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003818 <_svfiprintf_r+0x1ec>
 8003672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003676:	f04f 0901 	mov.w	r9, #1
 800367a:	4623      	mov	r3, r4
 800367c:	469a      	mov	sl, r3
 800367e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003682:	b10a      	cbz	r2, 8003688 <_svfiprintf_r+0x5c>
 8003684:	2a25      	cmp	r2, #37	; 0x25
 8003686:	d1f9      	bne.n	800367c <_svfiprintf_r+0x50>
 8003688:	ebba 0b04 	subs.w	fp, sl, r4
 800368c:	d00b      	beq.n	80036a6 <_svfiprintf_r+0x7a>
 800368e:	465b      	mov	r3, fp
 8003690:	4622      	mov	r2, r4
 8003692:	4629      	mov	r1, r5
 8003694:	4638      	mov	r0, r7
 8003696:	f7ff ff6d 	bl	8003574 <__ssputs_r>
 800369a:	3001      	adds	r0, #1
 800369c:	f000 80aa 	beq.w	80037f4 <_svfiprintf_r+0x1c8>
 80036a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a2:	445a      	add	r2, fp
 80036a4:	9209      	str	r2, [sp, #36]	; 0x24
 80036a6:	f89a 3000 	ldrb.w	r3, [sl]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80a2 	beq.w	80037f4 <_svfiprintf_r+0x1c8>
 80036b0:	2300      	movs	r3, #0
 80036b2:	f04f 32ff 	mov.w	r2, #4294967295
 80036b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ba:	f10a 0a01 	add.w	sl, sl, #1
 80036be:	9304      	str	r3, [sp, #16]
 80036c0:	9307      	str	r3, [sp, #28]
 80036c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036c6:	931a      	str	r3, [sp, #104]	; 0x68
 80036c8:	4654      	mov	r4, sl
 80036ca:	2205      	movs	r2, #5
 80036cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d0:	4851      	ldr	r0, [pc, #324]	; (8003818 <_svfiprintf_r+0x1ec>)
 80036d2:	f7fc fd7d 	bl	80001d0 <memchr>
 80036d6:	9a04      	ldr	r2, [sp, #16]
 80036d8:	b9d8      	cbnz	r0, 8003712 <_svfiprintf_r+0xe6>
 80036da:	06d0      	lsls	r0, r2, #27
 80036dc:	bf44      	itt	mi
 80036de:	2320      	movmi	r3, #32
 80036e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e4:	0711      	lsls	r1, r2, #28
 80036e6:	bf44      	itt	mi
 80036e8:	232b      	movmi	r3, #43	; 0x2b
 80036ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ee:	f89a 3000 	ldrb.w	r3, [sl]
 80036f2:	2b2a      	cmp	r3, #42	; 0x2a
 80036f4:	d015      	beq.n	8003722 <_svfiprintf_r+0xf6>
 80036f6:	9a07      	ldr	r2, [sp, #28]
 80036f8:	4654      	mov	r4, sl
 80036fa:	2000      	movs	r0, #0
 80036fc:	f04f 0c0a 	mov.w	ip, #10
 8003700:	4621      	mov	r1, r4
 8003702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003706:	3b30      	subs	r3, #48	; 0x30
 8003708:	2b09      	cmp	r3, #9
 800370a:	d94e      	bls.n	80037aa <_svfiprintf_r+0x17e>
 800370c:	b1b0      	cbz	r0, 800373c <_svfiprintf_r+0x110>
 800370e:	9207      	str	r2, [sp, #28]
 8003710:	e014      	b.n	800373c <_svfiprintf_r+0x110>
 8003712:	eba0 0308 	sub.w	r3, r0, r8
 8003716:	fa09 f303 	lsl.w	r3, r9, r3
 800371a:	4313      	orrs	r3, r2
 800371c:	9304      	str	r3, [sp, #16]
 800371e:	46a2      	mov	sl, r4
 8003720:	e7d2      	b.n	80036c8 <_svfiprintf_r+0x9c>
 8003722:	9b03      	ldr	r3, [sp, #12]
 8003724:	1d19      	adds	r1, r3, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	9103      	str	r1, [sp, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfbb      	ittet	lt
 800372e:	425b      	neglt	r3, r3
 8003730:	f042 0202 	orrlt.w	r2, r2, #2
 8003734:	9307      	strge	r3, [sp, #28]
 8003736:	9307      	strlt	r3, [sp, #28]
 8003738:	bfb8      	it	lt
 800373a:	9204      	strlt	r2, [sp, #16]
 800373c:	7823      	ldrb	r3, [r4, #0]
 800373e:	2b2e      	cmp	r3, #46	; 0x2e
 8003740:	d10c      	bne.n	800375c <_svfiprintf_r+0x130>
 8003742:	7863      	ldrb	r3, [r4, #1]
 8003744:	2b2a      	cmp	r3, #42	; 0x2a
 8003746:	d135      	bne.n	80037b4 <_svfiprintf_r+0x188>
 8003748:	9b03      	ldr	r3, [sp, #12]
 800374a:	1d1a      	adds	r2, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	9203      	str	r2, [sp, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	bfb8      	it	lt
 8003754:	f04f 33ff 	movlt.w	r3, #4294967295
 8003758:	3402      	adds	r4, #2
 800375a:	9305      	str	r3, [sp, #20]
 800375c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003828 <_svfiprintf_r+0x1fc>
 8003760:	7821      	ldrb	r1, [r4, #0]
 8003762:	2203      	movs	r2, #3
 8003764:	4650      	mov	r0, sl
 8003766:	f7fc fd33 	bl	80001d0 <memchr>
 800376a:	b140      	cbz	r0, 800377e <_svfiprintf_r+0x152>
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	eba0 000a 	sub.w	r0, r0, sl
 8003772:	fa03 f000 	lsl.w	r0, r3, r0
 8003776:	9b04      	ldr	r3, [sp, #16]
 8003778:	4303      	orrs	r3, r0
 800377a:	3401      	adds	r4, #1
 800377c:	9304      	str	r3, [sp, #16]
 800377e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003782:	4826      	ldr	r0, [pc, #152]	; (800381c <_svfiprintf_r+0x1f0>)
 8003784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003788:	2206      	movs	r2, #6
 800378a:	f7fc fd21 	bl	80001d0 <memchr>
 800378e:	2800      	cmp	r0, #0
 8003790:	d038      	beq.n	8003804 <_svfiprintf_r+0x1d8>
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <_svfiprintf_r+0x1f4>)
 8003794:	bb1b      	cbnz	r3, 80037de <_svfiprintf_r+0x1b2>
 8003796:	9b03      	ldr	r3, [sp, #12]
 8003798:	3307      	adds	r3, #7
 800379a:	f023 0307 	bic.w	r3, r3, #7
 800379e:	3308      	adds	r3, #8
 80037a0:	9303      	str	r3, [sp, #12]
 80037a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a4:	4433      	add	r3, r6
 80037a6:	9309      	str	r3, [sp, #36]	; 0x24
 80037a8:	e767      	b.n	800367a <_svfiprintf_r+0x4e>
 80037aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ae:	460c      	mov	r4, r1
 80037b0:	2001      	movs	r0, #1
 80037b2:	e7a5      	b.n	8003700 <_svfiprintf_r+0xd4>
 80037b4:	2300      	movs	r3, #0
 80037b6:	3401      	adds	r4, #1
 80037b8:	9305      	str	r3, [sp, #20]
 80037ba:	4619      	mov	r1, r3
 80037bc:	f04f 0c0a 	mov.w	ip, #10
 80037c0:	4620      	mov	r0, r4
 80037c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c6:	3a30      	subs	r2, #48	; 0x30
 80037c8:	2a09      	cmp	r2, #9
 80037ca:	d903      	bls.n	80037d4 <_svfiprintf_r+0x1a8>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0c5      	beq.n	800375c <_svfiprintf_r+0x130>
 80037d0:	9105      	str	r1, [sp, #20]
 80037d2:	e7c3      	b.n	800375c <_svfiprintf_r+0x130>
 80037d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d8:	4604      	mov	r4, r0
 80037da:	2301      	movs	r3, #1
 80037dc:	e7f0      	b.n	80037c0 <_svfiprintf_r+0x194>
 80037de:	ab03      	add	r3, sp, #12
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	462a      	mov	r2, r5
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <_svfiprintf_r+0x1f8>)
 80037e6:	a904      	add	r1, sp, #16
 80037e8:	4638      	mov	r0, r7
 80037ea:	f3af 8000 	nop.w
 80037ee:	1c42      	adds	r2, r0, #1
 80037f0:	4606      	mov	r6, r0
 80037f2:	d1d6      	bne.n	80037a2 <_svfiprintf_r+0x176>
 80037f4:	89ab      	ldrh	r3, [r5, #12]
 80037f6:	065b      	lsls	r3, r3, #25
 80037f8:	f53f af2c 	bmi.w	8003654 <_svfiprintf_r+0x28>
 80037fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037fe:	b01d      	add	sp, #116	; 0x74
 8003800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003804:	ab03      	add	r3, sp, #12
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	462a      	mov	r2, r5
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <_svfiprintf_r+0x1f8>)
 800380c:	a904      	add	r1, sp, #16
 800380e:	4638      	mov	r0, r7
 8003810:	f000 f87a 	bl	8003908 <_printf_i>
 8003814:	e7eb      	b.n	80037ee <_svfiprintf_r+0x1c2>
 8003816:	bf00      	nop
 8003818:	08004688 	.word	0x08004688
 800381c:	08004692 	.word	0x08004692
 8003820:	00000000 	.word	0x00000000
 8003824:	08003575 	.word	0x08003575
 8003828:	0800468e 	.word	0x0800468e

0800382c <_printf_common>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4616      	mov	r6, r2
 8003832:	4699      	mov	r9, r3
 8003834:	688a      	ldr	r2, [r1, #8]
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800383c:	4293      	cmp	r3, r2
 800383e:	bfb8      	it	lt
 8003840:	4613      	movlt	r3, r2
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003848:	4607      	mov	r7, r0
 800384a:	460c      	mov	r4, r1
 800384c:	b10a      	cbz	r2, 8003852 <_printf_common+0x26>
 800384e:	3301      	adds	r3, #1
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	0699      	lsls	r1, r3, #26
 8003856:	bf42      	ittt	mi
 8003858:	6833      	ldrmi	r3, [r6, #0]
 800385a:	3302      	addmi	r3, #2
 800385c:	6033      	strmi	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	f015 0506 	ands.w	r5, r5, #6
 8003864:	d106      	bne.n	8003874 <_printf_common+0x48>
 8003866:	f104 0a19 	add.w	sl, r4, #25
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	42ab      	cmp	r3, r5
 8003872:	dc26      	bgt.n	80038c2 <_printf_common+0x96>
 8003874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003878:	1e13      	subs	r3, r2, #0
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	bf18      	it	ne
 800387e:	2301      	movne	r3, #1
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d42b      	bmi.n	80038dc <_printf_common+0xb0>
 8003884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d01e      	beq.n	80038d0 <_printf_common+0xa4>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	68e5      	ldr	r5, [r4, #12]
 8003896:	6832      	ldr	r2, [r6, #0]
 8003898:	f003 0306 	and.w	r3, r3, #6
 800389c:	2b04      	cmp	r3, #4
 800389e:	bf08      	it	eq
 80038a0:	1aad      	subeq	r5, r5, r2
 80038a2:	68a3      	ldr	r3, [r4, #8]
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	bf0c      	ite	eq
 80038a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ac:	2500      	movne	r5, #0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	bfc4      	itt	gt
 80038b2:	1a9b      	subgt	r3, r3, r2
 80038b4:	18ed      	addgt	r5, r5, r3
 80038b6:	2600      	movs	r6, #0
 80038b8:	341a      	adds	r4, #26
 80038ba:	42b5      	cmp	r5, r6
 80038bc:	d11a      	bne.n	80038f4 <_printf_common+0xc8>
 80038be:	2000      	movs	r0, #0
 80038c0:	e008      	b.n	80038d4 <_printf_common+0xa8>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4652      	mov	r2, sl
 80038c6:	4649      	mov	r1, r9
 80038c8:	4638      	mov	r0, r7
 80038ca:	47c0      	blx	r8
 80038cc:	3001      	adds	r0, #1
 80038ce:	d103      	bne.n	80038d8 <_printf_common+0xac>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	3501      	adds	r5, #1
 80038da:	e7c6      	b.n	800386a <_printf_common+0x3e>
 80038dc:	18e1      	adds	r1, r4, r3
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	2030      	movs	r0, #48	; 0x30
 80038e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038e6:	4422      	add	r2, r4
 80038e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f0:	3302      	adds	r3, #2
 80038f2:	e7c7      	b.n	8003884 <_printf_common+0x58>
 80038f4:	2301      	movs	r3, #1
 80038f6:	4622      	mov	r2, r4
 80038f8:	4649      	mov	r1, r9
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d0e6      	beq.n	80038d0 <_printf_common+0xa4>
 8003902:	3601      	adds	r6, #1
 8003904:	e7d9      	b.n	80038ba <_printf_common+0x8e>
	...

08003908 <_printf_i>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	7e0f      	ldrb	r7, [r1, #24]
 800390e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003910:	2f78      	cmp	r7, #120	; 0x78
 8003912:	4691      	mov	r9, r2
 8003914:	4680      	mov	r8, r0
 8003916:	460c      	mov	r4, r1
 8003918:	469a      	mov	sl, r3
 800391a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800391e:	d807      	bhi.n	8003930 <_printf_i+0x28>
 8003920:	2f62      	cmp	r7, #98	; 0x62
 8003922:	d80a      	bhi.n	800393a <_printf_i+0x32>
 8003924:	2f00      	cmp	r7, #0
 8003926:	f000 80d8 	beq.w	8003ada <_printf_i+0x1d2>
 800392a:	2f58      	cmp	r7, #88	; 0x58
 800392c:	f000 80a3 	beq.w	8003a76 <_printf_i+0x16e>
 8003930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003938:	e03a      	b.n	80039b0 <_printf_i+0xa8>
 800393a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800393e:	2b15      	cmp	r3, #21
 8003940:	d8f6      	bhi.n	8003930 <_printf_i+0x28>
 8003942:	a101      	add	r1, pc, #4	; (adr r1, 8003948 <_printf_i+0x40>)
 8003944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039b5 	.word	0x080039b5
 8003950:	08003931 	.word	0x08003931
 8003954:	08003931 	.word	0x08003931
 8003958:	08003931 	.word	0x08003931
 800395c:	08003931 	.word	0x08003931
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003931 	.word	0x08003931
 8003968:	08003931 	.word	0x08003931
 800396c:	08003931 	.word	0x08003931
 8003970:	08003931 	.word	0x08003931
 8003974:	08003ac1 	.word	0x08003ac1
 8003978:	080039e5 	.word	0x080039e5
 800397c:	08003aa3 	.word	0x08003aa3
 8003980:	08003931 	.word	0x08003931
 8003984:	08003931 	.word	0x08003931
 8003988:	08003ae3 	.word	0x08003ae3
 800398c:	08003931 	.word	0x08003931
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003931 	.word	0x08003931
 8003998:	08003931 	.word	0x08003931
 800399c:	08003aab 	.word	0x08003aab
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	602a      	str	r2, [r5, #0]
 80039a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0a3      	b.n	8003afc <_printf_i+0x1f4>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	6829      	ldr	r1, [r5, #0]
 80039b8:	0606      	lsls	r6, r0, #24
 80039ba:	f101 0304 	add.w	r3, r1, #4
 80039be:	d50a      	bpl.n	80039d6 <_printf_i+0xce>
 80039c0:	680e      	ldr	r6, [r1, #0]
 80039c2:	602b      	str	r3, [r5, #0]
 80039c4:	2e00      	cmp	r6, #0
 80039c6:	da03      	bge.n	80039d0 <_printf_i+0xc8>
 80039c8:	232d      	movs	r3, #45	; 0x2d
 80039ca:	4276      	negs	r6, r6
 80039cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d0:	485e      	ldr	r0, [pc, #376]	; (8003b4c <_printf_i+0x244>)
 80039d2:	230a      	movs	r3, #10
 80039d4:	e019      	b.n	8003a0a <_printf_i+0x102>
 80039d6:	680e      	ldr	r6, [r1, #0]
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039de:	bf18      	it	ne
 80039e0:	b236      	sxthne	r6, r6
 80039e2:	e7ef      	b.n	80039c4 <_printf_i+0xbc>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	6820      	ldr	r0, [r4, #0]
 80039e8:	1d19      	adds	r1, r3, #4
 80039ea:	6029      	str	r1, [r5, #0]
 80039ec:	0601      	lsls	r1, r0, #24
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0xec>
 80039f0:	681e      	ldr	r6, [r3, #0]
 80039f2:	e002      	b.n	80039fa <_printf_i+0xf2>
 80039f4:	0646      	lsls	r6, r0, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0xe8>
 80039f8:	881e      	ldrh	r6, [r3, #0]
 80039fa:	4854      	ldr	r0, [pc, #336]	; (8003b4c <_printf_i+0x244>)
 80039fc:	2f6f      	cmp	r7, #111	; 0x6f
 80039fe:	bf0c      	ite	eq
 8003a00:	2308      	moveq	r3, #8
 8003a02:	230a      	movne	r3, #10
 8003a04:	2100      	movs	r1, #0
 8003a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a0a:	6865      	ldr	r5, [r4, #4]
 8003a0c:	60a5      	str	r5, [r4, #8]
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	bfa2      	ittt	ge
 8003a12:	6821      	ldrge	r1, [r4, #0]
 8003a14:	f021 0104 	bicge.w	r1, r1, #4
 8003a18:	6021      	strge	r1, [r4, #0]
 8003a1a:	b90e      	cbnz	r6, 8003a20 <_printf_i+0x118>
 8003a1c:	2d00      	cmp	r5, #0
 8003a1e:	d04d      	beq.n	8003abc <_printf_i+0x1b4>
 8003a20:	4615      	mov	r5, r2
 8003a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a26:	fb03 6711 	mls	r7, r3, r1, r6
 8003a2a:	5dc7      	ldrb	r7, [r0, r7]
 8003a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a30:	4637      	mov	r7, r6
 8003a32:	42bb      	cmp	r3, r7
 8003a34:	460e      	mov	r6, r1
 8003a36:	d9f4      	bls.n	8003a22 <_printf_i+0x11a>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d10b      	bne.n	8003a54 <_printf_i+0x14c>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	07de      	lsls	r6, r3, #31
 8003a40:	d508      	bpl.n	8003a54 <_printf_i+0x14c>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	6861      	ldr	r1, [r4, #4]
 8003a46:	4299      	cmp	r1, r3
 8003a48:	bfde      	ittt	le
 8003a4a:	2330      	movle	r3, #48	; 0x30
 8003a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a54:	1b52      	subs	r2, r2, r5
 8003a56:	6122      	str	r2, [r4, #16]
 8003a58:	f8cd a000 	str.w	sl, [sp]
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	aa03      	add	r2, sp, #12
 8003a60:	4621      	mov	r1, r4
 8003a62:	4640      	mov	r0, r8
 8003a64:	f7ff fee2 	bl	800382c <_printf_common>
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d14c      	bne.n	8003b06 <_printf_i+0x1fe>
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	b004      	add	sp, #16
 8003a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a76:	4835      	ldr	r0, [pc, #212]	; (8003b4c <_printf_i+0x244>)
 8003a78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a7c:	6829      	ldr	r1, [r5, #0]
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a84:	6029      	str	r1, [r5, #0]
 8003a86:	061d      	lsls	r5, r3, #24
 8003a88:	d514      	bpl.n	8003ab4 <_printf_i+0x1ac>
 8003a8a:	07df      	lsls	r7, r3, #31
 8003a8c:	bf44      	itt	mi
 8003a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8003a92:	6023      	strmi	r3, [r4, #0]
 8003a94:	b91e      	cbnz	r6, 8003a9e <_printf_i+0x196>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f023 0320 	bic.w	r3, r3, #32
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	e7b0      	b.n	8003a04 <_printf_i+0xfc>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	2378      	movs	r3, #120	; 0x78
 8003aac:	4828      	ldr	r0, [pc, #160]	; (8003b50 <_printf_i+0x248>)
 8003aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab2:	e7e3      	b.n	8003a7c <_printf_i+0x174>
 8003ab4:	0659      	lsls	r1, r3, #25
 8003ab6:	bf48      	it	mi
 8003ab8:	b2b6      	uxthmi	r6, r6
 8003aba:	e7e6      	b.n	8003a8a <_printf_i+0x182>
 8003abc:	4615      	mov	r5, r2
 8003abe:	e7bb      	b.n	8003a38 <_printf_i+0x130>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	6826      	ldr	r6, [r4, #0]
 8003ac4:	6961      	ldr	r1, [r4, #20]
 8003ac6:	1d18      	adds	r0, r3, #4
 8003ac8:	6028      	str	r0, [r5, #0]
 8003aca:	0635      	lsls	r5, r6, #24
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	d501      	bpl.n	8003ad4 <_printf_i+0x1cc>
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <_printf_i+0x1d2>
 8003ad4:	0670      	lsls	r0, r6, #25
 8003ad6:	d5fb      	bpl.n	8003ad0 <_printf_i+0x1c8>
 8003ad8:	8019      	strh	r1, [r3, #0]
 8003ada:	2300      	movs	r3, #0
 8003adc:	6123      	str	r3, [r4, #16]
 8003ade:	4615      	mov	r5, r2
 8003ae0:	e7ba      	b.n	8003a58 <_printf_i+0x150>
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	602a      	str	r2, [r5, #0]
 8003ae8:	681d      	ldr	r5, [r3, #0]
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7fc fb6e 	bl	80001d0 <memchr>
 8003af4:	b108      	cbz	r0, 8003afa <_printf_i+0x1f2>
 8003af6:	1b40      	subs	r0, r0, r5
 8003af8:	6060      	str	r0, [r4, #4]
 8003afa:	6863      	ldr	r3, [r4, #4]
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	2300      	movs	r3, #0
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	e7a8      	b.n	8003a58 <_printf_i+0x150>
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	47d0      	blx	sl
 8003b10:	3001      	adds	r0, #1
 8003b12:	d0ab      	beq.n	8003a6c <_printf_i+0x164>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	079b      	lsls	r3, r3, #30
 8003b18:	d413      	bmi.n	8003b42 <_printf_i+0x23a>
 8003b1a:	68e0      	ldr	r0, [r4, #12]
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	4298      	cmp	r0, r3
 8003b20:	bfb8      	it	lt
 8003b22:	4618      	movlt	r0, r3
 8003b24:	e7a4      	b.n	8003a70 <_printf_i+0x168>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4632      	mov	r2, r6
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	47d0      	blx	sl
 8003b30:	3001      	adds	r0, #1
 8003b32:	d09b      	beq.n	8003a6c <_printf_i+0x164>
 8003b34:	3501      	adds	r5, #1
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	9903      	ldr	r1, [sp, #12]
 8003b3a:	1a5b      	subs	r3, r3, r1
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dcf2      	bgt.n	8003b26 <_printf_i+0x21e>
 8003b40:	e7eb      	b.n	8003b1a <_printf_i+0x212>
 8003b42:	2500      	movs	r5, #0
 8003b44:	f104 0619 	add.w	r6, r4, #25
 8003b48:	e7f5      	b.n	8003b36 <_printf_i+0x22e>
 8003b4a:	bf00      	nop
 8003b4c:	08004699 	.word	0x08004699
 8003b50:	080046aa 	.word	0x080046aa

08003b54 <memcpy>:
 8003b54:	440a      	add	r2, r1
 8003b56:	4291      	cmp	r1, r2
 8003b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b5c:	d100      	bne.n	8003b60 <memcpy+0xc>
 8003b5e:	4770      	bx	lr
 8003b60:	b510      	push	{r4, lr}
 8003b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b6a:	4291      	cmp	r1, r2
 8003b6c:	d1f9      	bne.n	8003b62 <memcpy+0xe>
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <memmove>:
 8003b70:	4288      	cmp	r0, r1
 8003b72:	b510      	push	{r4, lr}
 8003b74:	eb01 0402 	add.w	r4, r1, r2
 8003b78:	d902      	bls.n	8003b80 <memmove+0x10>
 8003b7a:	4284      	cmp	r4, r0
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	d807      	bhi.n	8003b90 <memmove+0x20>
 8003b80:	1e43      	subs	r3, r0, #1
 8003b82:	42a1      	cmp	r1, r4
 8003b84:	d008      	beq.n	8003b98 <memmove+0x28>
 8003b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b8e:	e7f8      	b.n	8003b82 <memmove+0x12>
 8003b90:	4402      	add	r2, r0
 8003b92:	4601      	mov	r1, r0
 8003b94:	428a      	cmp	r2, r1
 8003b96:	d100      	bne.n	8003b9a <memmove+0x2a>
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ba2:	e7f7      	b.n	8003b94 <memmove+0x24>

08003ba4 <_free_r>:
 8003ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	d044      	beq.n	8003c34 <_free_r+0x90>
 8003baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bae:	9001      	str	r0, [sp, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8003bb6:	bfb8      	it	lt
 8003bb8:	18e4      	addlt	r4, r4, r3
 8003bba:	f000 f913 	bl	8003de4 <__malloc_lock>
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <_free_r+0x94>)
 8003bc0:	9801      	ldr	r0, [sp, #4]
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	b933      	cbnz	r3, 8003bd4 <_free_r+0x30>
 8003bc6:	6063      	str	r3, [r4, #4]
 8003bc8:	6014      	str	r4, [r2, #0]
 8003bca:	b003      	add	sp, #12
 8003bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bd0:	f000 b90e 	b.w	8003df0 <__malloc_unlock>
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d908      	bls.n	8003bea <_free_r+0x46>
 8003bd8:	6825      	ldr	r5, [r4, #0]
 8003bda:	1961      	adds	r1, r4, r5
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	bf01      	itttt	eq
 8003be0:	6819      	ldreq	r1, [r3, #0]
 8003be2:	685b      	ldreq	r3, [r3, #4]
 8003be4:	1949      	addeq	r1, r1, r5
 8003be6:	6021      	streq	r1, [r4, #0]
 8003be8:	e7ed      	b.n	8003bc6 <_free_r+0x22>
 8003bea:	461a      	mov	r2, r3
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	b10b      	cbz	r3, 8003bf4 <_free_r+0x50>
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	d9fa      	bls.n	8003bea <_free_r+0x46>
 8003bf4:	6811      	ldr	r1, [r2, #0]
 8003bf6:	1855      	adds	r5, r2, r1
 8003bf8:	42a5      	cmp	r5, r4
 8003bfa:	d10b      	bne.n	8003c14 <_free_r+0x70>
 8003bfc:	6824      	ldr	r4, [r4, #0]
 8003bfe:	4421      	add	r1, r4
 8003c00:	1854      	adds	r4, r2, r1
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	d1e0      	bne.n	8003bca <_free_r+0x26>
 8003c08:	681c      	ldr	r4, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	6053      	str	r3, [r2, #4]
 8003c0e:	4421      	add	r1, r4
 8003c10:	6011      	str	r1, [r2, #0]
 8003c12:	e7da      	b.n	8003bca <_free_r+0x26>
 8003c14:	d902      	bls.n	8003c1c <_free_r+0x78>
 8003c16:	230c      	movs	r3, #12
 8003c18:	6003      	str	r3, [r0, #0]
 8003c1a:	e7d6      	b.n	8003bca <_free_r+0x26>
 8003c1c:	6825      	ldr	r5, [r4, #0]
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	428b      	cmp	r3, r1
 8003c22:	bf04      	itt	eq
 8003c24:	6819      	ldreq	r1, [r3, #0]
 8003c26:	685b      	ldreq	r3, [r3, #4]
 8003c28:	6063      	str	r3, [r4, #4]
 8003c2a:	bf04      	itt	eq
 8003c2c:	1949      	addeq	r1, r1, r5
 8003c2e:	6021      	streq	r1, [r4, #0]
 8003c30:	6054      	str	r4, [r2, #4]
 8003c32:	e7ca      	b.n	8003bca <_free_r+0x26>
 8003c34:	b003      	add	sp, #12
 8003c36:	bd30      	pop	{r4, r5, pc}
 8003c38:	20000124 	.word	0x20000124

08003c3c <sbrk_aligned>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4e0e      	ldr	r6, [pc, #56]	; (8003c78 <sbrk_aligned+0x3c>)
 8003c40:	460c      	mov	r4, r1
 8003c42:	6831      	ldr	r1, [r6, #0]
 8003c44:	4605      	mov	r5, r0
 8003c46:	b911      	cbnz	r1, 8003c4e <sbrk_aligned+0x12>
 8003c48:	f000 f8bc 	bl	8003dc4 <_sbrk_r>
 8003c4c:	6030      	str	r0, [r6, #0]
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4628      	mov	r0, r5
 8003c52:	f000 f8b7 	bl	8003dc4 <_sbrk_r>
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	d00a      	beq.n	8003c70 <sbrk_aligned+0x34>
 8003c5a:	1cc4      	adds	r4, r0, #3
 8003c5c:	f024 0403 	bic.w	r4, r4, #3
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d007      	beq.n	8003c74 <sbrk_aligned+0x38>
 8003c64:	1a21      	subs	r1, r4, r0
 8003c66:	4628      	mov	r0, r5
 8003c68:	f000 f8ac 	bl	8003dc4 <_sbrk_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d101      	bne.n	8003c74 <sbrk_aligned+0x38>
 8003c70:	f04f 34ff 	mov.w	r4, #4294967295
 8003c74:	4620      	mov	r0, r4
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	20000128 	.word	0x20000128

08003c7c <_malloc_r>:
 8003c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c80:	1ccd      	adds	r5, r1, #3
 8003c82:	f025 0503 	bic.w	r5, r5, #3
 8003c86:	3508      	adds	r5, #8
 8003c88:	2d0c      	cmp	r5, #12
 8003c8a:	bf38      	it	cc
 8003c8c:	250c      	movcc	r5, #12
 8003c8e:	2d00      	cmp	r5, #0
 8003c90:	4607      	mov	r7, r0
 8003c92:	db01      	blt.n	8003c98 <_malloc_r+0x1c>
 8003c94:	42a9      	cmp	r1, r5
 8003c96:	d905      	bls.n	8003ca4 <_malloc_r+0x28>
 8003c98:	230c      	movs	r3, #12
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca4:	4e2e      	ldr	r6, [pc, #184]	; (8003d60 <_malloc_r+0xe4>)
 8003ca6:	f000 f89d 	bl	8003de4 <__malloc_lock>
 8003caa:	6833      	ldr	r3, [r6, #0]
 8003cac:	461c      	mov	r4, r3
 8003cae:	bb34      	cbnz	r4, 8003cfe <_malloc_r+0x82>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	f7ff ffc2 	bl	8003c3c <sbrk_aligned>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	4604      	mov	r4, r0
 8003cbc:	d14d      	bne.n	8003d5a <_malloc_r+0xde>
 8003cbe:	6834      	ldr	r4, [r6, #0]
 8003cc0:	4626      	mov	r6, r4
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	d140      	bne.n	8003d48 <_malloc_r+0xcc>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4638      	mov	r0, r7
 8003ccc:	eb04 0803 	add.w	r8, r4, r3
 8003cd0:	f000 f878 	bl	8003dc4 <_sbrk_r>
 8003cd4:	4580      	cmp	r8, r0
 8003cd6:	d13a      	bne.n	8003d4e <_malloc_r+0xd2>
 8003cd8:	6821      	ldr	r1, [r4, #0]
 8003cda:	3503      	adds	r5, #3
 8003cdc:	1a6d      	subs	r5, r5, r1
 8003cde:	f025 0503 	bic.w	r5, r5, #3
 8003ce2:	3508      	adds	r5, #8
 8003ce4:	2d0c      	cmp	r5, #12
 8003ce6:	bf38      	it	cc
 8003ce8:	250c      	movcc	r5, #12
 8003cea:	4629      	mov	r1, r5
 8003cec:	4638      	mov	r0, r7
 8003cee:	f7ff ffa5 	bl	8003c3c <sbrk_aligned>
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d02b      	beq.n	8003d4e <_malloc_r+0xd2>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	442b      	add	r3, r5
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	e00e      	b.n	8003d1c <_malloc_r+0xa0>
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	1b52      	subs	r2, r2, r5
 8003d02:	d41e      	bmi.n	8003d42 <_malloc_r+0xc6>
 8003d04:	2a0b      	cmp	r2, #11
 8003d06:	d916      	bls.n	8003d36 <_malloc_r+0xba>
 8003d08:	1961      	adds	r1, r4, r5
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	6025      	str	r5, [r4, #0]
 8003d0e:	bf18      	it	ne
 8003d10:	6059      	strne	r1, [r3, #4]
 8003d12:	6863      	ldr	r3, [r4, #4]
 8003d14:	bf08      	it	eq
 8003d16:	6031      	streq	r1, [r6, #0]
 8003d18:	5162      	str	r2, [r4, r5]
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	4638      	mov	r0, r7
 8003d1e:	f104 060b 	add.w	r6, r4, #11
 8003d22:	f000 f865 	bl	8003df0 <__malloc_unlock>
 8003d26:	f026 0607 	bic.w	r6, r6, #7
 8003d2a:	1d23      	adds	r3, r4, #4
 8003d2c:	1af2      	subs	r2, r6, r3
 8003d2e:	d0b6      	beq.n	8003c9e <_malloc_r+0x22>
 8003d30:	1b9b      	subs	r3, r3, r6
 8003d32:	50a3      	str	r3, [r4, r2]
 8003d34:	e7b3      	b.n	8003c9e <_malloc_r+0x22>
 8003d36:	6862      	ldr	r2, [r4, #4]
 8003d38:	42a3      	cmp	r3, r4
 8003d3a:	bf0c      	ite	eq
 8003d3c:	6032      	streq	r2, [r6, #0]
 8003d3e:	605a      	strne	r2, [r3, #4]
 8003d40:	e7ec      	b.n	8003d1c <_malloc_r+0xa0>
 8003d42:	4623      	mov	r3, r4
 8003d44:	6864      	ldr	r4, [r4, #4]
 8003d46:	e7b2      	b.n	8003cae <_malloc_r+0x32>
 8003d48:	4634      	mov	r4, r6
 8003d4a:	6876      	ldr	r6, [r6, #4]
 8003d4c:	e7b9      	b.n	8003cc2 <_malloc_r+0x46>
 8003d4e:	230c      	movs	r3, #12
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4638      	mov	r0, r7
 8003d54:	f000 f84c 	bl	8003df0 <__malloc_unlock>
 8003d58:	e7a1      	b.n	8003c9e <_malloc_r+0x22>
 8003d5a:	6025      	str	r5, [r4, #0]
 8003d5c:	e7de      	b.n	8003d1c <_malloc_r+0xa0>
 8003d5e:	bf00      	nop
 8003d60:	20000124 	.word	0x20000124

08003d64 <_realloc_r>:
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	4680      	mov	r8, r0
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	460e      	mov	r6, r1
 8003d6e:	b921      	cbnz	r1, 8003d7a <_realloc_r+0x16>
 8003d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d74:	4611      	mov	r1, r2
 8003d76:	f7ff bf81 	b.w	8003c7c <_malloc_r>
 8003d7a:	b92a      	cbnz	r2, 8003d88 <_realloc_r+0x24>
 8003d7c:	f7ff ff12 	bl	8003ba4 <_free_r>
 8003d80:	4625      	mov	r5, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d88:	f000 f838 	bl	8003dfc <_malloc_usable_size_r>
 8003d8c:	4284      	cmp	r4, r0
 8003d8e:	4607      	mov	r7, r0
 8003d90:	d802      	bhi.n	8003d98 <_realloc_r+0x34>
 8003d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d96:	d812      	bhi.n	8003dbe <_realloc_r+0x5a>
 8003d98:	4621      	mov	r1, r4
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	f7ff ff6e 	bl	8003c7c <_malloc_r>
 8003da0:	4605      	mov	r5, r0
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d0ed      	beq.n	8003d82 <_realloc_r+0x1e>
 8003da6:	42bc      	cmp	r4, r7
 8003da8:	4622      	mov	r2, r4
 8003daa:	4631      	mov	r1, r6
 8003dac:	bf28      	it	cs
 8003dae:	463a      	movcs	r2, r7
 8003db0:	f7ff fed0 	bl	8003b54 <memcpy>
 8003db4:	4631      	mov	r1, r6
 8003db6:	4640      	mov	r0, r8
 8003db8:	f7ff fef4 	bl	8003ba4 <_free_r>
 8003dbc:	e7e1      	b.n	8003d82 <_realloc_r+0x1e>
 8003dbe:	4635      	mov	r5, r6
 8003dc0:	e7df      	b.n	8003d82 <_realloc_r+0x1e>
	...

08003dc4 <_sbrk_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4d06      	ldr	r5, [pc, #24]	; (8003de0 <_sbrk_r+0x1c>)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	602b      	str	r3, [r5, #0]
 8003dd0:	f7ff fb0c 	bl	80033ec <_sbrk>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d102      	bne.n	8003dde <_sbrk_r+0x1a>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	b103      	cbz	r3, 8003dde <_sbrk_r+0x1a>
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	2000012c 	.word	0x2000012c

08003de4 <__malloc_lock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <__malloc_lock+0x8>)
 8003de6:	f000 b811 	b.w	8003e0c <__retarget_lock_acquire_recursive>
 8003dea:	bf00      	nop
 8003dec:	20000130 	.word	0x20000130

08003df0 <__malloc_unlock>:
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <__malloc_unlock+0x8>)
 8003df2:	f000 b80c 	b.w	8003e0e <__retarget_lock_release_recursive>
 8003df6:	bf00      	nop
 8003df8:	20000130 	.word	0x20000130

08003dfc <_malloc_usable_size_r>:
 8003dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e00:	1f18      	subs	r0, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bfbc      	itt	lt
 8003e06:	580b      	ldrlt	r3, [r1, r0]
 8003e08:	18c0      	addlt	r0, r0, r3
 8003e0a:	4770      	bx	lr

08003e0c <__retarget_lock_acquire_recursive>:
 8003e0c:	4770      	bx	lr

08003e0e <__retarget_lock_release_recursive>:
 8003e0e:	4770      	bx	lr

08003e10 <_init>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr

08003e1c <_fini>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr
